/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk;

import static pl.postivo.sdk.operations.Operations.RequestlessOperation;
import static pl.postivo.sdk.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import pl.postivo.sdk.models.components.Group;
import pl.postivo.sdk.models.operations.AddGroupRequestBuilder;
import pl.postivo.sdk.models.operations.AddGroupResponse;
import pl.postivo.sdk.models.operations.ContactHandling;
import pl.postivo.sdk.models.operations.DeleteGroupRequest;
import pl.postivo.sdk.models.operations.DeleteGroupRequestBuilder;
import pl.postivo.sdk.models.operations.DeleteGroupResponse;
import pl.postivo.sdk.models.operations.GetGroupByIdRequest;
import pl.postivo.sdk.models.operations.GetGroupByIdRequestBuilder;
import pl.postivo.sdk.models.operations.GetGroupByIdResponse;
import pl.postivo.sdk.models.operations.ListGroupsRequestBuilder;
import pl.postivo.sdk.models.operations.ListGroupsResponse;
import pl.postivo.sdk.models.operations.UpdateGroupRequest;
import pl.postivo.sdk.models.operations.UpdateGroupRequestBuilder;
import pl.postivo.sdk.models.operations.UpdateGroupResponse;
import pl.postivo.sdk.operations.AddGroup;
import pl.postivo.sdk.operations.DeleteGroup;
import pl.postivo.sdk.operations.GetGroupById;
import pl.postivo.sdk.operations.ListGroups;
import pl.postivo.sdk.operations.UpdateGroup;
import pl.postivo.sdk.utils.Headers;
import pl.postivo.sdk.utils.Options;


public class Groups {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncGroups asyncSDK;

    Groups(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncGroups(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncGroups async() {
        return asyncSDK;
    }

    /**
     * List groups
     * 
     * <p>Retrieve the full list of groups defined in your account’s Address Book.
     * 
     * @return The call builder
     */
    public ListGroupsRequestBuilder list() {
        return new ListGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List groups
     * 
     * <p>Retrieve the full list of groups defined in your account’s Address Book.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListGroupsResponse listDirect() throws Exception {
        return list(null);
    }

    /**
     * List groups
     * 
     * <p>Retrieve the full list of groups defined in your account’s Address Book.
     * 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListGroupsResponse list(@Nullable Options options) throws Exception {
        RequestlessOperation<ListGroupsResponse> operation
            = new ListGroups.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Add a new group
     * 
     * <p>Create a new contact group in your account’s Address Book.
     * 
     * @return The call builder
     */
    public AddGroupRequestBuilder add() {
        return new AddGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a new group
     * 
     * <p>Create a new contact group in your account’s Address Book.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddGroupResponse add(@Nonnull Group request) throws Exception {
        return add(request, null);
    }

    /**
     * Add a new group
     * 
     * <p>Create a new contact group in your account’s Address Book.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddGroupResponse add(@Nonnull Group request, @Nullable Options options) throws Exception {
        RequestOperation<Group, AddGroupResponse> operation
              = new AddGroup.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve group details
     * 
     * <p>Get the details of a single group from your Address Book by its `id` (returned when the group was
     * created).
     * 
     * @return The call builder
     */
    public GetGroupByIdRequestBuilder get() {
        return new GetGroupByIdRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve group details
     * 
     * <p>Get the details of a single group from your Address Book by its `id` (returned when the group was
     * created).
     * 
     * @param id Group id to fetch
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetGroupByIdResponse get(long id) throws Exception {
        return get(id, null);
    }

    /**
     * Retrieve group details
     * 
     * <p>Get the details of a single group from your Address Book by its `id` (returned when the group was
     * created).
     * 
     * @param id Group id to fetch
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetGroupByIdResponse get(long id, @Nullable Options options) throws Exception {
        GetGroupByIdRequest request = new GetGroupByIdRequest(id);
        RequestOperation<GetGroupByIdRequest, GetGroupByIdResponse> operation
              = new GetGroupById.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a group
     * 
     * <p>Update a group’s details by ID.
     * 
     * @return The call builder
     */
    public UpdateGroupRequestBuilder update() {
        return new UpdateGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a group
     * 
     * <p>Update a group’s details by ID.
     * 
     * @param id Group `id` to update.
     * @param group Contact group definition in the Address Book.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateGroupResponse update(long id, @Nonnull Group group) throws Exception {
        return update(id, group, null);
    }

    /**
     * Update a group
     * 
     * <p>Update a group’s details by ID.
     * 
     * @param id Group `id` to update.
     * @param group Contact group definition in the Address Book.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateGroupResponse update(
            long id, @Nonnull Group group,
            @Nullable Options options) throws Exception {
        UpdateGroupRequest request = new UpdateGroupRequest(id, group);
        RequestOperation<UpdateGroupRequest, UpdateGroupResponse> operation
              = new UpdateGroup.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a group
     * 
     * <p>Remove a group from your account’s Address Book by `ID`. Pass the group’s `id` to remove it. The
     * group is deleted immediately from the Address Book.
     * 
     * <p>If you also want to remove contacts that belong to this group, set the parameter `contacts` to
     * `delete`. The default is `contacts: detach`, which detaches contacts from the removed group but
     * leaves them in the Address Book.
     * 
     * @return The call builder
     */
    public DeleteGroupRequestBuilder delete() {
        return new DeleteGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a group
     * 
     * <p>Remove a group from your account’s Address Book by `ID`. Pass the group’s `id` to remove it. The
     * group is deleted immediately from the Address Book.
     * 
     * <p>If you also want to remove contacts that belong to this group, set the parameter `contacts` to
     * `delete`. The default is `contacts: detach`, which detaches contacts from the removed group but
     * leaves them in the Address Book.
     * 
     * @param id Group `id` to remove.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteGroupResponse delete(long id) throws Exception {
        return delete(id, null, null);
    }

    /**
     * Delete a group
     * 
     * <p>Remove a group from your account’s Address Book by `ID`. Pass the group’s `id` to remove it. The
     * group is deleted immediately from the Address Book.
     * 
     * <p>If you also want to remove contacts that belong to this group, set the parameter `contacts` to
     * `delete`. The default is `contacts: detach`, which detaches contacts from the removed group but
     * leaves them in the Address Book.
     * 
     * @param id Group `id` to remove.
     * @param contacts How to handle contacts that belong to the group.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteGroupResponse delete(
            long id, @Nullable ContactHandling contacts,
            @Nullable Options options) throws Exception {
        DeleteGroupRequest request = new DeleteGroupRequest(id, contacts);
        RequestOperation<DeleteGroupRequest, DeleteGroupResponse> operation
              = new DeleteGroup.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
