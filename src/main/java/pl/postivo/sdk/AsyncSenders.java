/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk;

import static pl.postivo.sdk.operations.Operations.AsyncRequestlessOperation;
import static pl.postivo.sdk.operations.Operations.AsyncRequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.util.concurrent.CompletableFuture;
import pl.postivo.sdk.models.components.Sender;
import pl.postivo.sdk.models.operations.DeleteSenderRequest;
import pl.postivo.sdk.models.operations.VerifySenderRequest;
import pl.postivo.sdk.models.operations.VerifySenderRequestBody;
import pl.postivo.sdk.models.operations.async.AddSenderRequestBuilder;
import pl.postivo.sdk.models.operations.async.AddSenderResponse;
import pl.postivo.sdk.models.operations.async.DeleteSenderRequestBuilder;
import pl.postivo.sdk.models.operations.async.DeleteSenderResponse;
import pl.postivo.sdk.models.operations.async.ListSendersRequestBuilder;
import pl.postivo.sdk.models.operations.async.ListSendersResponse;
import pl.postivo.sdk.models.operations.async.VerifySenderRequestBuilder;
import pl.postivo.sdk.models.operations.async.VerifySenderResponse;
import pl.postivo.sdk.operations.AddSender;
import pl.postivo.sdk.operations.DeleteSender;
import pl.postivo.sdk.operations.ListSenders;
import pl.postivo.sdk.operations.VerifySender;
import pl.postivo.sdk.utils.Headers;
import pl.postivo.sdk.utils.Options;


public class AsyncSenders {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Senders syncSDK;

    AsyncSenders(Senders syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Senders sync() {
        return syncSDK;
    }


    /**
     * List senders
     * 
     * <p>Retrieve the list of allowed senders defined in your account. Senders are registered in your account
     * and must be verified and activated before use. Activated senders have `active: true` property and
     * can be used to send shipments.
     * 
     * <p>Inactive senders are also returned (`active: false`), but cannot be used until activated.
     * 
     * @return The async call builder
     */
    public ListSendersRequestBuilder list() {
        return new ListSendersRequestBuilder(sdkConfiguration);
    }

    /**
     * List senders
     * 
     * <p>Retrieve the list of allowed senders defined in your account. Senders are registered in your account
     * and must be verified and activated before use. Activated senders have `active: true` property and
     * can be used to send shipments.
     * 
     * <p>Inactive senders are also returned (`active: false`), but cannot be used until activated.
     * 
     * @return {@code CompletableFuture<ListSendersResponse>} - The async response
     */
    public CompletableFuture<ListSendersResponse> listDirect() {
        return list(null);
    }

    /**
     * List senders
     * 
     * <p>Retrieve the list of allowed senders defined in your account. Senders are registered in your account
     * and must be verified and activated before use. Activated senders have `active: true` property and
     * can be used to send shipments.
     * 
     * <p>Inactive senders are also returned (`active: false`), but cannot be used until activated.
     * 
     * @param options additional options
     * @return {@code CompletableFuture<ListSendersResponse>} - The async response
     */
    public CompletableFuture<ListSendersResponse> list(@Nullable Options options) {
        AsyncRequestlessOperation<ListSendersResponse> operation
            = new ListSenders.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest()
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add a new sender
     * 
     * <p>Create a new sender on your account. The request must contain a `Sender` object. To prevent fraud,
     * all additional senders are verified by mailing a verification code to the sender’s address.
     * 
     * <p>Complete the verification using the `verifySender` method. Verified senders have `active: true` and
     * can be used to send shipments. Inactive senders are also returned (`active: false`), but cannot be
     * used until verification is completed.
     * 
     * @return The async call builder
     */
    public AddSenderRequestBuilder add() {
        return new AddSenderRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a new sender
     * 
     * <p>Create a new sender on your account. The request must contain a `Sender` object. To prevent fraud,
     * all additional senders are verified by mailing a verification code to the sender’s address.
     * 
     * <p>Complete the verification using the `verifySender` method. Verified senders have `active: true` and
     * can be used to send shipments. Inactive senders are also returned (`active: false`), but cannot be
     * used until verification is completed.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AddSenderResponse>} - The async response
     */
    public CompletableFuture<AddSenderResponse> add(@Nonnull Sender request) {
        return add(request, null);
    }

    /**
     * Add a new sender
     * 
     * <p>Create a new sender on your account. The request must contain a `Sender` object. To prevent fraud,
     * all additional senders are verified by mailing a verification code to the sender’s address.
     * 
     * <p>Complete the verification using the `verifySender` method. Verified senders have `active: true` and
     * can be used to send shipments. Inactive senders are also returned (`active: false`), but cannot be
     * used until verification is completed.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AddSenderResponse>} - The async response
     */
    public CompletableFuture<AddSenderResponse> add(@Nonnull Sender request, @Nullable Options options) {
        AsyncRequestOperation<Sender, AddSenderResponse> operation
              = new AddSender.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete a sender
     * 
     * <p>Remove a sender from your account by `id`. Pass the sender’s `id` parameter to remove it. The sender
     * is deleted immediately.
     * 
     * @return The async call builder
     */
    public DeleteSenderRequestBuilder delete() {
        return new DeleteSenderRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a sender
     * 
     * <p>Remove a sender from your account by `id`. Pass the sender’s `id` parameter to remove it. The sender
     * is deleted immediately.
     * 
     * @param id Sender `id` to remove.
     * @return {@code CompletableFuture<DeleteSenderResponse>} - The async response
     */
    public CompletableFuture<DeleteSenderResponse> delete(long id) {
        return delete(id, null);
    }

    /**
     * Delete a sender
     * 
     * <p>Remove a sender from your account by `id`. Pass the sender’s `id` parameter to remove it. The sender
     * is deleted immediately.
     * 
     * @param id Sender `id` to remove.
     * @param options additional options
     * @return {@code CompletableFuture<DeleteSenderResponse>} - The async response
     */
    public CompletableFuture<DeleteSenderResponse> delete(long id, @Nullable Options options) {
        DeleteSenderRequest request = new DeleteSenderRequest(id);
        AsyncRequestOperation<DeleteSenderRequest, DeleteSenderResponse> operation
              = new DeleteSender.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Verify sender
     * 
     * <p>Verify a sender to activate it. After adding a new sender, a letter containing a verification code
     * is mailed to the sender’s address. Provide this code to complete verification.
     * 
     * @return The async call builder
     */
    public VerifySenderRequestBuilder verify() {
        return new VerifySenderRequestBuilder(sdkConfiguration);
    }

    /**
     * Verify sender
     * 
     * <p>Verify a sender to activate it. After adding a new sender, a letter containing a verification code
     * is mailed to the sender’s address. Provide this code to complete verification.
     * 
     * @param id ID of the sender to verify.
     * @param requestBody Verification code received in the letter.
     * @return {@code CompletableFuture<VerifySenderResponse>} - The async response
     */
    public CompletableFuture<VerifySenderResponse> verify(long id, @Nonnull VerifySenderRequestBody requestBody) {
        return verify(id, requestBody, null);
    }

    /**
     * Verify sender
     * 
     * <p>Verify a sender to activate it. After adding a new sender, a letter containing a verification code
     * is mailed to the sender’s address. Provide this code to complete verification.
     * 
     * @param id ID of the sender to verify.
     * @param requestBody Verification code received in the letter.
     * @param options additional options
     * @return {@code CompletableFuture<VerifySenderResponse>} - The async response
     */
    public CompletableFuture<VerifySenderResponse> verify(
            long id, @Nonnull VerifySenderRequestBody requestBody,
            @Nullable Options options) {
        VerifySenderRequest request = new VerifySenderRequest(id, requestBody);
        AsyncRequestOperation<VerifySenderRequest, VerifySenderResponse> operation
              = new VerifySender.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
