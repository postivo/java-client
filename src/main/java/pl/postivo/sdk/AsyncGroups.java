/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk;

import static pl.postivo.sdk.operations.Operations.AsyncRequestlessOperation;
import static pl.postivo.sdk.operations.Operations.AsyncRequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.util.concurrent.CompletableFuture;
import pl.postivo.sdk.models.components.Group;
import pl.postivo.sdk.models.operations.ContactHandling;
import pl.postivo.sdk.models.operations.DeleteGroupRequest;
import pl.postivo.sdk.models.operations.GetGroupByIdRequest;
import pl.postivo.sdk.models.operations.UpdateGroupRequest;
import pl.postivo.sdk.models.operations.async.AddGroupRequestBuilder;
import pl.postivo.sdk.models.operations.async.AddGroupResponse;
import pl.postivo.sdk.models.operations.async.DeleteGroupRequestBuilder;
import pl.postivo.sdk.models.operations.async.DeleteGroupResponse;
import pl.postivo.sdk.models.operations.async.GetGroupByIdRequestBuilder;
import pl.postivo.sdk.models.operations.async.GetGroupByIdResponse;
import pl.postivo.sdk.models.operations.async.ListGroupsRequestBuilder;
import pl.postivo.sdk.models.operations.async.ListGroupsResponse;
import pl.postivo.sdk.models.operations.async.UpdateGroupRequestBuilder;
import pl.postivo.sdk.models.operations.async.UpdateGroupResponse;
import pl.postivo.sdk.operations.AddGroup;
import pl.postivo.sdk.operations.DeleteGroup;
import pl.postivo.sdk.operations.GetGroupById;
import pl.postivo.sdk.operations.ListGroups;
import pl.postivo.sdk.operations.UpdateGroup;
import pl.postivo.sdk.utils.Headers;
import pl.postivo.sdk.utils.Options;


public class AsyncGroups {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Groups syncSDK;

    AsyncGroups(Groups syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Groups sync() {
        return syncSDK;
    }


    /**
     * List groups
     * 
     * <p>Retrieve the full list of groups defined in your account’s Address Book.
     * 
     * @return The async call builder
     */
    public ListGroupsRequestBuilder list() {
        return new ListGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List groups
     * 
     * <p>Retrieve the full list of groups defined in your account’s Address Book.
     * 
     * @return {@code CompletableFuture<ListGroupsResponse>} - The async response
     */
    public CompletableFuture<ListGroupsResponse> listDirect() {
        return list(null);
    }

    /**
     * List groups
     * 
     * <p>Retrieve the full list of groups defined in your account’s Address Book.
     * 
     * @param options additional options
     * @return {@code CompletableFuture<ListGroupsResponse>} - The async response
     */
    public CompletableFuture<ListGroupsResponse> list(@Nullable Options options) {
        AsyncRequestlessOperation<ListGroupsResponse> operation
            = new ListGroups.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest()
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add a new group
     * 
     * <p>Create a new contact group in your account’s Address Book.
     * 
     * @return The async call builder
     */
    public AddGroupRequestBuilder add() {
        return new AddGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a new group
     * 
     * <p>Create a new contact group in your account’s Address Book.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AddGroupResponse>} - The async response
     */
    public CompletableFuture<AddGroupResponse> add(@Nonnull Group request) {
        return add(request, null);
    }

    /**
     * Add a new group
     * 
     * <p>Create a new contact group in your account’s Address Book.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AddGroupResponse>} - The async response
     */
    public CompletableFuture<AddGroupResponse> add(@Nonnull Group request, @Nullable Options options) {
        AsyncRequestOperation<Group, AddGroupResponse> operation
              = new AddGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve group details
     * 
     * <p>Get the details of a single group from your Address Book by its <code>id</code> (returned when the group was
     * created).
     * 
     * @return The async call builder
     */
    public GetGroupByIdRequestBuilder get() {
        return new GetGroupByIdRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve group details
     * 
     * <p>Get the details of a single group from your Address Book by its <code>id</code> (returned when the group was
     * created).
     * 
     * @param id Group id to fetch
     * @return {@code CompletableFuture<GetGroupByIdResponse>} - The async response
     */
    public CompletableFuture<GetGroupByIdResponse> get(long id) {
        return get(id, null);
    }

    /**
     * Retrieve group details
     * 
     * <p>Get the details of a single group from your Address Book by its <code>id</code> (returned when the group was
     * created).
     * 
     * @param id Group id to fetch
     * @param options additional options
     * @return {@code CompletableFuture<GetGroupByIdResponse>} - The async response
     */
    public CompletableFuture<GetGroupByIdResponse> get(long id, @Nullable Options options) {
        GetGroupByIdRequest request = new GetGroupByIdRequest(id);
        AsyncRequestOperation<GetGroupByIdRequest, GetGroupByIdResponse> operation
              = new GetGroupById.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a group
     * 
     * <p>Update a group’s details by ID.
     * 
     * @return The async call builder
     */
    public UpdateGroupRequestBuilder update() {
        return new UpdateGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a group
     * 
     * <p>Update a group’s details by ID.
     * 
     * @param id Group <code>id</code> to update.
     * @param group Contact group definition in the Address Book.
     * @return {@code CompletableFuture<UpdateGroupResponse>} - The async response
     */
    public CompletableFuture<UpdateGroupResponse> update(long id, @Nonnull Group group) {
        return update(id, group, null);
    }

    /**
     * Update a group
     * 
     * <p>Update a group’s details by ID.
     * 
     * @param id Group <code>id</code> to update.
     * @param group Contact group definition in the Address Book.
     * @param options additional options
     * @return {@code CompletableFuture<UpdateGroupResponse>} - The async response
     */
    public CompletableFuture<UpdateGroupResponse> update(
            long id, @Nonnull Group group,
            @Nullable Options options) {
        UpdateGroupRequest request = new UpdateGroupRequest(id, group);
        AsyncRequestOperation<UpdateGroupRequest, UpdateGroupResponse> operation
              = new UpdateGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete a group
     * 
     * <p>Remove a group from your account’s Address Book by <code>ID</code>. Pass the group’s <code>id</code> to remove it. The
     * group is deleted immediately from the Address Book.
     * 
     * <p>If you also want to remove contacts that belong to this group, set the parameter <code>contacts</code> to
     * <code>delete</code>. The default is <code>contacts: detach</code>, which detaches contacts from the removed group but
     * leaves them in the Address Book.
     * 
     * @return The async call builder
     */
    public DeleteGroupRequestBuilder delete() {
        return new DeleteGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a group
     * 
     * <p>Remove a group from your account’s Address Book by <code>ID</code>. Pass the group’s <code>id</code> to remove it. The
     * group is deleted immediately from the Address Book.
     * 
     * <p>If you also want to remove contacts that belong to this group, set the parameter <code>contacts</code> to
     * <code>delete</code>. The default is <code>contacts: detach</code>, which detaches contacts from the removed group but
     * leaves them in the Address Book.
     * 
     * @param id Group <code>id</code> to remove.
     * @return {@code CompletableFuture<DeleteGroupResponse>} - The async response
     */
    public CompletableFuture<DeleteGroupResponse> delete(long id) {
        return delete(id, null, null);
    }

    /**
     * Delete a group
     * 
     * <p>Remove a group from your account’s Address Book by <code>ID</code>. Pass the group’s <code>id</code> to remove it. The
     * group is deleted immediately from the Address Book.
     * 
     * <p>If you also want to remove contacts that belong to this group, set the parameter <code>contacts</code> to
     * <code>delete</code>. The default is <code>contacts: detach</code>, which detaches contacts from the removed group but
     * leaves them in the Address Book.
     * 
     * @param id Group <code>id</code> to remove.
     * @param contacts How to handle contacts that belong to the group.
     * @param options additional options
     * @return {@code CompletableFuture<DeleteGroupResponse>} - The async response
     */
    public CompletableFuture<DeleteGroupResponse> delete(
            long id, @Nullable ContactHandling contacts,
            @Nullable Options options) {
        DeleteGroupRequest request = new DeleteGroupRequest(id, contacts);
        AsyncRequestOperation<DeleteGroupRequest, DeleteGroupResponse> operation
              = new DeleteGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
