/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk;

import static pl.postivo.sdk.operations.Operations.AsyncRequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.util.concurrent.CompletableFuture;
import pl.postivo.sdk.models.components.Contact;
import pl.postivo.sdk.models.operations.AddContactToGroupRequest;
import pl.postivo.sdk.models.operations.DeleteContactRequest;
import pl.postivo.sdk.models.operations.GetContactByIdRequest;
import pl.postivo.sdk.models.operations.ListContactsRequest;
import pl.postivo.sdk.models.operations.RemoveContactFromGroupRequest;
import pl.postivo.sdk.models.operations.UpdateContactRequest;
import pl.postivo.sdk.models.operations.async.AddContactRequestBuilder;
import pl.postivo.sdk.models.operations.async.AddContactResponse;
import pl.postivo.sdk.models.operations.async.AddContactToGroupRequestBuilder;
import pl.postivo.sdk.models.operations.async.AddContactToGroupResponse;
import pl.postivo.sdk.models.operations.async.DeleteContactRequestBuilder;
import pl.postivo.sdk.models.operations.async.DeleteContactResponse;
import pl.postivo.sdk.models.operations.async.GetContactByIdRequestBuilder;
import pl.postivo.sdk.models.operations.async.GetContactByIdResponse;
import pl.postivo.sdk.models.operations.async.ListContactsRequestBuilder;
import pl.postivo.sdk.models.operations.async.ListContactsResponse;
import pl.postivo.sdk.models.operations.async.RemoveContactFromGroupRequestBuilder;
import pl.postivo.sdk.models.operations.async.RemoveContactFromGroupResponse;
import pl.postivo.sdk.models.operations.async.UpdateContactRequestBuilder;
import pl.postivo.sdk.models.operations.async.UpdateContactResponse;
import pl.postivo.sdk.operations.AddContact;
import pl.postivo.sdk.operations.AddContactToGroup;
import pl.postivo.sdk.operations.DeleteContact;
import pl.postivo.sdk.operations.GetContactById;
import pl.postivo.sdk.operations.ListContacts;
import pl.postivo.sdk.operations.RemoveContactFromGroup;
import pl.postivo.sdk.operations.UpdateContact;
import pl.postivo.sdk.utils.Headers;
import pl.postivo.sdk.utils.Options;


public class AsyncContacts {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncByExtId byExtId;
    private final Contacts syncSDK;

    AsyncContacts(Contacts syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.byExtId = new AsyncByExtId(syncSDK.byExtId(), this.sdkConfiguration);
        this.syncSDK = syncSDK;
    }

    public final AsyncByExtId byExtId() {
        return byExtId;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Contacts sync() {
        return syncSDK;
    }


    /**
     * List contacts
     * 
     * <p>Retrieve a paginated list of all contacts defined in your account’s **Address Book**.
     * 
     * @return The async call builder
     */
    public ListContactsRequestBuilder list() {
        return new ListContactsRequestBuilder(sdkConfiguration);
    }

    /**
     * List contacts
     * 
     * <p>Retrieve a paginated list of all contacts defined in your account’s **Address Book**.
     * 
     * @return {@code CompletableFuture<ListContactsResponse>} - The async response
     */
    public CompletableFuture<ListContactsResponse> listDirect() {
        return list(null, null, null);
    }

    /**
     * List contacts
     * 
     * <p>Retrieve a paginated list of all contacts defined in your account’s **Address Book**.
     * 
     * @param page Page number of results
     * @param limit Results limit per page.
     * @param options additional options
     * @return {@code CompletableFuture<ListContactsResponse>} - The async response
     */
    public CompletableFuture<ListContactsResponse> list(
            @Nullable Long page, @Nullable Long limit,
            @Nullable Options options) {
        ListContactsRequest request = new ListContactsRequest(page, limit);
        AsyncRequestOperation<ListContactsRequest, ListContactsResponse> operation
              = new ListContacts.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add a new contact
     * 
     * <p>Create a new contact in your account’s **Address Book**.
     * 
     * @return The async call builder
     */
    public AddContactRequestBuilder add() {
        return new AddContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a new contact
     * 
     * <p>Create a new contact in your account’s **Address Book**.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<AddContactResponse>} - The async response
     */
    public CompletableFuture<AddContactResponse> add(@Nonnull Contact request) {
        return add(request, null);
    }

    /**
     * Add a new contact
     * 
     * <p>Create a new contact in your account’s **Address Book**.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<AddContactResponse>} - The async response
     */
    public CompletableFuture<AddContactResponse> add(@Nonnull Contact request, @Nullable Options options) {
        AsyncRequestOperation<Contact, AddContactResponse> operation
              = new AddContact.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve contact details
     * 
     * <p>Get the details of a contact from your Address Book using its global <code>id</code>.
     * 
     * @return The async call builder
     */
    public GetContactByIdRequestBuilder get() {
        return new GetContactByIdRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve contact details
     * 
     * <p>Get the details of a contact from your Address Book using its global <code>id</code>.
     * 
     * @param id Global contact <code>id</code> to fetch.
     * @return {@code CompletableFuture<GetContactByIdResponse>} - The async response
     */
    public CompletableFuture<GetContactByIdResponse> get(long id) {
        return get(id, null);
    }

    /**
     * Retrieve contact details
     * 
     * <p>Get the details of a contact from your Address Book using its global <code>id</code>.
     * 
     * @param id Global contact <code>id</code> to fetch.
     * @param options additional options
     * @return {@code CompletableFuture<GetContactByIdResponse>} - The async response
     */
    public CompletableFuture<GetContactByIdResponse> get(long id, @Nullable Options options) {
        GetContactByIdRequest request = new GetContactByIdRequest(id);
        AsyncRequestOperation<GetContactByIdRequest, GetContactByIdResponse> operation
              = new GetContactById.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a contact
     * 
     * <p>Update a contact by its global ID.
     * 
     * @return The async call builder
     */
    public UpdateContactRequestBuilder update() {
        return new UpdateContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * <p>Update a contact by its global ID.
     * 
     * @param id ID of the contact to update.
     * @param contact Contact data for an Address Book entry.
     * @return {@code CompletableFuture<UpdateContactResponse>} - The async response
     */
    public CompletableFuture<UpdateContactResponse> update(long id, @Nonnull Contact contact) {
        return update(id, contact, null);
    }

    /**
     * Update a contact
     * 
     * <p>Update a contact by its global ID.
     * 
     * @param id ID of the contact to update.
     * @param contact Contact data for an Address Book entry.
     * @param options additional options
     * @return {@code CompletableFuture<UpdateContactResponse>} - The async response
     */
    public CompletableFuture<UpdateContactResponse> update(
            long id, @Nonnull Contact contact,
            @Nullable Options options) {
        UpdateContactRequest request = new UpdateContactRequest(id, contact);
        AsyncRequestOperation<UpdateContactRequest, UpdateContactResponse> operation
              = new UpdateContact.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete a contact
     * 
     * <p>Remove a contact from your account by system ID.
     * 
     * @return The async call builder
     */
    public DeleteContactRequestBuilder delete() {
        return new DeleteContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a contact
     * 
     * <p>Remove a contact from your account by system ID.
     * 
     * @param id Global contact <code>id</code> to remove.
     * @return {@code CompletableFuture<DeleteContactResponse>} - The async response
     */
    public CompletableFuture<DeleteContactResponse> delete(long id) {
        return delete(id, null);
    }

    /**
     * Delete a contact
     * 
     * <p>Remove a contact from your account by system ID.
     * 
     * @param id Global contact <code>id</code> to remove.
     * @param options additional options
     * @return {@code CompletableFuture<DeleteContactResponse>} - The async response
     */
    public CompletableFuture<DeleteContactResponse> delete(long id, @Nullable Options options) {
        DeleteContactRequest request = new DeleteContactRequest(id);
        AsyncRequestOperation<DeleteContactRequest, DeleteContactResponse> operation
              = new DeleteContact.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a contact from a group
     * 
     * <p>Remove a contact from a group in your Address Book. This does not delete the contact; it only
     * detaches the contact from the group.
     * 
     * <p>Provide the contact’s <code>id</code> and the group’s <code>group_id</code> parameters to perform the detachment.
     * 
     * @return The async call builder
     */
    public RemoveContactFromGroupRequestBuilder removeFromGroup() {
        return new RemoveContactFromGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a contact from a group
     * 
     * <p>Remove a contact from a group in your Address Book. This does not delete the contact; it only
     * detaches the contact from the group.
     * 
     * <p>Provide the contact’s <code>id</code> and the group’s <code>group_id</code> parameters to perform the detachment.
     * 
     * @param id Global contact <code>id</code> to detach from the group.
     * @param groupId Group <code>id</code> to detach from the contact.
     * @return {@code CompletableFuture<RemoveContactFromGroupResponse>} - The async response
     */
    public CompletableFuture<RemoveContactFromGroupResponse> removeFromGroup(long id, long groupId) {
        return removeFromGroup(id, groupId, null);
    }

    /**
     * Remove a contact from a group
     * 
     * <p>Remove a contact from a group in your Address Book. This does not delete the contact; it only
     * detaches the contact from the group.
     * 
     * <p>Provide the contact’s <code>id</code> and the group’s <code>group_id</code> parameters to perform the detachment.
     * 
     * @param id Global contact <code>id</code> to detach from the group.
     * @param groupId Group <code>id</code> to detach from the contact.
     * @param options additional options
     * @return {@code CompletableFuture<RemoveContactFromGroupResponse>} - The async response
     */
    public CompletableFuture<RemoveContactFromGroupResponse> removeFromGroup(
            long id, long groupId,
            @Nullable Options options) {
        RemoveContactFromGroupRequest request = new RemoveContactFromGroupRequest(id, groupId);
        AsyncRequestOperation<RemoveContactFromGroupRequest, RemoveContactFromGroupResponse> operation
              = new RemoveContactFromGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add a contact to a group
     * 
     * <p>Assign a contact to a group. If a contact and a group exist in your account, you can add the contact
     * to that group.
     * 
     * <p>Provide the contact’s <code>id</code> and the group’s <code>group_id</code> parameters to perform the assignment.
     * 
     * @return The async call builder
     */
    public AddContactToGroupRequestBuilder addToGroup() {
        return new AddContactToGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a contact to a group
     * 
     * <p>Assign a contact to a group. If a contact and a group exist in your account, you can add the contact
     * to that group.
     * 
     * <p>Provide the contact’s <code>id</code> and the group’s <code>group_id</code> parameters to perform the assignment.
     * 
     * @param id Global contact <code>id</code> to add to the group.
     * @param groupId Group <code>id</code> to associate with the contact.
     * @return {@code CompletableFuture<AddContactToGroupResponse>} - The async response
     */
    public CompletableFuture<AddContactToGroupResponse> addToGroup(long id, long groupId) {
        return addToGroup(id, groupId, null);
    }

    /**
     * Add a contact to a group
     * 
     * <p>Assign a contact to a group. If a contact and a group exist in your account, you can add the contact
     * to that group.
     * 
     * <p>Provide the contact’s <code>id</code> and the group’s <code>group_id</code> parameters to perform the assignment.
     * 
     * @param id Global contact <code>id</code> to add to the group.
     * @param groupId Group <code>id</code> to associate with the contact.
     * @param options additional options
     * @return {@code CompletableFuture<AddContactToGroupResponse>} - The async response
     */
    public CompletableFuture<AddContactToGroupResponse> addToGroup(
            long id, long groupId,
            @Nullable Options options) {
        AddContactToGroupRequest request = new AddContactToGroupRequest(id, groupId);
        AsyncRequestOperation<AddContactToGroupRequest, AddContactToGroupResponse> operation
              = new AddContactToGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
