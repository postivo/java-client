/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.Utils;

/**
 * DocumentResponse
 * 
 * <p>Generated document content.
 */
public class DocumentResponse {
    /**
     * Document MIME type.
     */
    @JsonProperty("mime_type")
    private String mimeType;

    /**
     * Base64-encoded document content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_stream")
    private String fileStream;

    @JsonCreator
    public DocumentResponse(
            @JsonProperty("mime_type") @Nonnull String mimeType,
            @JsonProperty("file_stream") @Nullable String fileStream) {
        this.mimeType = Optional.ofNullable(mimeType)
            .orElseThrow(() -> new IllegalArgumentException("mimeType cannot be null"));
        this.fileStream = fileStream;
    }
    
    public DocumentResponse(
            @Nonnull String mimeType) {
        this(mimeType, null);
    }

    /**
     * Document MIME type.
     */
    public String mimeType() {
        return this.mimeType;
    }

    /**
     * Base64-encoded document content.
     */
    public Optional<String> fileStream() {
        return Optional.ofNullable(this.fileStream);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Document MIME type.
     */
    public DocumentResponse withMimeType(@Nonnull String mimeType) {
        this.mimeType = Utils.checkNotNull(mimeType, "mimeType");
        return this;
    }


    /**
     * Base64-encoded document content.
     */
    public DocumentResponse withFileStream(@Nullable String fileStream) {
        this.fileStream = fileStream;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentResponse other = (DocumentResponse) o;
        return 
            Utils.enhancedDeepEquals(this.mimeType, other.mimeType) &&
            Utils.enhancedDeepEquals(this.fileStream, other.fileStream);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            mimeType, fileStream);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentResponse.class,
                "mimeType", mimeType,
                "fileStream", fileStream);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String mimeType;

        private String fileStream;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Document MIME type.
         */
        public Builder mimeType(@Nonnull String mimeType) {
            this.mimeType = Utils.checkNotNull(mimeType, "mimeType");
            return this;
        }

        /**
         * Base64-encoded document content.
         */
        public Builder fileStream(@Nullable String fileStream) {
            this.fileStream = fileStream;
            return this;
        }

        public DocumentResponse build() {
            return new DocumentResponse(
                mimeType, fileStream);
        }

    }
}
