/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.Utils;


public class Paper {
    /**
     * Unique paper type identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paper_id")
    private Long paperId;

    /**
     * Paper type name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paper_name")
    private String paperName;

    @JsonCreator
    public Paper(
            @JsonProperty("paper_id") @Nullable Long paperId,
            @JsonProperty("paper_name") @Nullable String paperName) {
        this.paperId = paperId;
        this.paperName = paperName;
    }
    
    public Paper() {
        this(null, null);
    }

    /**
     * Unique paper type identifier.
     */
    public Optional<Long> paperId() {
        return Optional.ofNullable(this.paperId);
    }

    /**
     * Paper type name.
     */
    public Optional<String> paperName() {
        return Optional.ofNullable(this.paperName);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique paper type identifier.
     */
    public Paper withPaperId(@Nullable Long paperId) {
        this.paperId = paperId;
        return this;
    }


    /**
     * Paper type name.
     */
    public Paper withPaperName(@Nullable String paperName) {
        this.paperName = paperName;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Paper other = (Paper) o;
        return 
            Utils.enhancedDeepEquals(this.paperId, other.paperId) &&
            Utils.enhancedDeepEquals(this.paperName, other.paperName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            paperId, paperName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Paper.class,
                "paperId", paperId,
                "paperName", paperName);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long paperId;

        private String paperName;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique paper type identifier.
         */
        public Builder paperId(@Nullable Long paperId) {
            this.paperId = paperId;
            return this;
        }

        /**
         * Paper type name.
         */
        public Builder paperName(@Nullable String paperName) {
            this.paperName = paperName;
            return this;
        }

        public Paper build() {
            return new Paper(
                paperId, paperName);
        }

    }
}
