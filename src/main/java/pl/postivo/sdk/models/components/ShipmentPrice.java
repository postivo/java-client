/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Float;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.Utils;

/**
 * ShipmentPrice
 * 
 * <p>Pricing details for a single shipment
 */
public class ShipmentPrice {
    /**
     * Recipient data for a shipment, including full postal address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient")
    private Recipient recipient;

    /**
     * Sender data for the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sender")
    private Sender sender;

    /**
     * Shipment processing status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private ShipmentPriceStatus status;

    /**
     * Postal operator that will handle the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier")
    private ShipmentPriceCarrier carrier;

    /**
     * Service (shipment type) selected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service")
    private ShipmentPriceService service;

    /**
     * Total number of pages across all documents in the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_number")
    private Long pageNumber;

    /**
     * Shipment price (PLN).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    private Float price;

    @JsonCreator
    public ShipmentPrice(
            @JsonProperty("recipient") @Nullable Recipient recipient,
            @JsonProperty("sender") @Nullable Sender sender,
            @JsonProperty("status") @Nullable ShipmentPriceStatus status,
            @JsonProperty("carrier") @Nullable ShipmentPriceCarrier carrier,
            @JsonProperty("service") @Nullable ShipmentPriceService service,
            @JsonProperty("page_number") @Nullable Long pageNumber,
            @JsonProperty("price") @Nullable Float price) {
        this.recipient = recipient;
        this.sender = sender;
        this.status = status;
        this.carrier = carrier;
        this.service = service;
        this.pageNumber = pageNumber;
        this.price = price;
    }
    
    public ShipmentPrice() {
        this(null, null, null,
            null, null, null,
            null);
    }

    /**
     * Recipient data for a shipment, including full postal address.
     */
    public Optional<Recipient> recipient() {
        return Optional.ofNullable(this.recipient);
    }

    /**
     * Sender data for the shipment.
     */
    public Optional<Sender> sender() {
        return Optional.ofNullable(this.sender);
    }

    /**
     * Shipment processing status.
     */
    public Optional<ShipmentPriceStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Postal operator that will handle the shipment.
     */
    public Optional<ShipmentPriceCarrier> carrier() {
        return Optional.ofNullable(this.carrier);
    }

    /**
     * Service (shipment type) selected.
     */
    public Optional<ShipmentPriceService> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * Total number of pages across all documents in the shipment.
     */
    public Optional<Long> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }

    /**
     * Shipment price (PLN).
     */
    public Optional<Float> price() {
        return Optional.ofNullable(this.price);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Recipient data for a shipment, including full postal address.
     */
    public ShipmentPrice withRecipient(@Nullable Recipient recipient) {
        this.recipient = recipient;
        return this;
    }


    /**
     * Sender data for the shipment.
     */
    public ShipmentPrice withSender(@Nullable Sender sender) {
        this.sender = sender;
        return this;
    }


    /**
     * Shipment processing status.
     */
    public ShipmentPrice withStatus(@Nullable ShipmentPriceStatus status) {
        this.status = status;
        return this;
    }


    /**
     * Postal operator that will handle the shipment.
     */
    public ShipmentPrice withCarrier(@Nullable ShipmentPriceCarrier carrier) {
        this.carrier = carrier;
        return this;
    }


    /**
     * Service (shipment type) selected.
     */
    public ShipmentPrice withService(@Nullable ShipmentPriceService service) {
        this.service = service;
        return this;
    }


    /**
     * Total number of pages across all documents in the shipment.
     */
    public ShipmentPrice withPageNumber(@Nullable Long pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }


    /**
     * Shipment price (PLN).
     */
    public ShipmentPrice withPrice(@Nullable Float price) {
        this.price = price;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShipmentPrice other = (ShipmentPrice) o;
        return 
            Utils.enhancedDeepEquals(this.recipient, other.recipient) &&
            Utils.enhancedDeepEquals(this.sender, other.sender) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.carrier, other.carrier) &&
            Utils.enhancedDeepEquals(this.service, other.service) &&
            Utils.enhancedDeepEquals(this.pageNumber, other.pageNumber) &&
            Utils.enhancedDeepEquals(this.price, other.price);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            recipient, sender, status,
            carrier, service, pageNumber,
            price);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ShipmentPrice.class,
                "recipient", recipient,
                "sender", sender,
                "status", status,
                "carrier", carrier,
                "service", service,
                "pageNumber", pageNumber,
                "price", price);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Recipient recipient;

        private Sender sender;

        private ShipmentPriceStatus status;

        private ShipmentPriceCarrier carrier;

        private ShipmentPriceService service;

        private Long pageNumber;

        private Float price;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Recipient data for a shipment, including full postal address.
         */
        public Builder recipient(@Nullable Recipient recipient) {
            this.recipient = recipient;
            return this;
        }

        /**
         * Sender data for the shipment.
         */
        public Builder sender(@Nullable Sender sender) {
            this.sender = sender;
            return this;
        }

        /**
         * Shipment processing status.
         */
        public Builder status(@Nullable ShipmentPriceStatus status) {
            this.status = status;
            return this;
        }

        /**
         * Postal operator that will handle the shipment.
         */
        public Builder carrier(@Nullable ShipmentPriceCarrier carrier) {
            this.carrier = carrier;
            return this;
        }

        /**
         * Service (shipment type) selected.
         */
        public Builder service(@Nullable ShipmentPriceService service) {
            this.service = service;
            return this;
        }

        /**
         * Total number of pages across all documents in the shipment.
         */
        public Builder pageNumber(@Nullable Long pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        /**
         * Shipment price (PLN).
         */
        public Builder price(@Nullable Float price) {
            this.price = price;
            return this;
        }

        public ShipmentPrice build() {
            return new ShipmentPrice(
                recipient, sender, status,
                carrier, service, pageNumber,
                price);
        }

    }
}
