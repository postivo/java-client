/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.Utils;

/**
 * PredefinedConfig
 * 
 * <p>Predefined configuration usable for dispatching shipments (referenced via `predefined_config_id`).
 */
public class PredefinedConfig {
    /**
     * Unique predefined configuration ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Long id;

    /**
     * Predefined configuration name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    /**
     * Paper type name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paper_name")
    private String paperName;

    /**
     * Print documents in color (`true`) or grayscale (`false`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color_print")
    private Boolean colorPrint;

    /**
     * Print documents duplex (`true`) or single-sided (`false`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duplex_print")
    private Boolean duplexPrint;

    /**
     * Preferred envelope type name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envelope_name")
    private String envelopeName;

    /**
     * Preferred envelope size.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envelope_size")
    private String envelopeSize;

    /**
     * Envelope group name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envelope_group_name")
    private String envelopeGroupName;

    /**
     * Print the envelope in color (`true`) or grayscale (`false`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envelope_color_print")
    private Boolean envelopeColorPrint;

    @JsonCreator
    public PredefinedConfig(
            @JsonProperty("id") @Nullable Long id,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("paper_name") @Nullable String paperName,
            @JsonProperty("color_print") @Nullable Boolean colorPrint,
            @JsonProperty("duplex_print") @Nullable Boolean duplexPrint,
            @JsonProperty("envelope_name") @Nullable String envelopeName,
            @JsonProperty("envelope_size") @Nullable String envelopeSize,
            @JsonProperty("envelope_group_name") @Nullable String envelopeGroupName,
            @JsonProperty("envelope_color_print") @Nullable Boolean envelopeColorPrint) {
        this.id = id;
        this.name = name;
        this.paperName = paperName;
        this.colorPrint = colorPrint;
        this.duplexPrint = duplexPrint;
        this.envelopeName = envelopeName;
        this.envelopeSize = envelopeSize;
        this.envelopeGroupName = envelopeGroupName;
        this.envelopeColorPrint = envelopeColorPrint;
    }
    
    public PredefinedConfig() {
        this(null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * Unique predefined configuration ID.
     */
    public Optional<Long> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Predefined configuration name.
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Paper type name.
     */
    public Optional<String> paperName() {
        return Optional.ofNullable(this.paperName);
    }

    /**
     * Print documents in color (`true`) or grayscale (`false`).
     */
    public Optional<Boolean> colorPrint() {
        return Optional.ofNullable(this.colorPrint);
    }

    /**
     * Print documents duplex (`true`) or single-sided (`false`).
     */
    public Optional<Boolean> duplexPrint() {
        return Optional.ofNullable(this.duplexPrint);
    }

    /**
     * Preferred envelope type name.
     */
    public Optional<String> envelopeName() {
        return Optional.ofNullable(this.envelopeName);
    }

    /**
     * Preferred envelope size.
     */
    public Optional<String> envelopeSize() {
        return Optional.ofNullable(this.envelopeSize);
    }

    /**
     * Envelope group name.
     */
    public Optional<String> envelopeGroupName() {
        return Optional.ofNullable(this.envelopeGroupName);
    }

    /**
     * Print the envelope in color (`true`) or grayscale (`false`).
     */
    public Optional<Boolean> envelopeColorPrint() {
        return Optional.ofNullable(this.envelopeColorPrint);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique predefined configuration ID.
     */
    public PredefinedConfig withId(@Nullable Long id) {
        this.id = id;
        return this;
    }


    /**
     * Predefined configuration name.
     */
    public PredefinedConfig withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * Paper type name.
     */
    public PredefinedConfig withPaperName(@Nullable String paperName) {
        this.paperName = paperName;
        return this;
    }


    /**
     * Print documents in color (`true`) or grayscale (`false`).
     */
    public PredefinedConfig withColorPrint(@Nullable Boolean colorPrint) {
        this.colorPrint = colorPrint;
        return this;
    }


    /**
     * Print documents duplex (`true`) or single-sided (`false`).
     */
    public PredefinedConfig withDuplexPrint(@Nullable Boolean duplexPrint) {
        this.duplexPrint = duplexPrint;
        return this;
    }


    /**
     * Preferred envelope type name.
     */
    public PredefinedConfig withEnvelopeName(@Nullable String envelopeName) {
        this.envelopeName = envelopeName;
        return this;
    }


    /**
     * Preferred envelope size.
     */
    public PredefinedConfig withEnvelopeSize(@Nullable String envelopeSize) {
        this.envelopeSize = envelopeSize;
        return this;
    }


    /**
     * Envelope group name.
     */
    public PredefinedConfig withEnvelopeGroupName(@Nullable String envelopeGroupName) {
        this.envelopeGroupName = envelopeGroupName;
        return this;
    }


    /**
     * Print the envelope in color (`true`) or grayscale (`false`).
     */
    public PredefinedConfig withEnvelopeColorPrint(@Nullable Boolean envelopeColorPrint) {
        this.envelopeColorPrint = envelopeColorPrint;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PredefinedConfig other = (PredefinedConfig) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.paperName, other.paperName) &&
            Utils.enhancedDeepEquals(this.colorPrint, other.colorPrint) &&
            Utils.enhancedDeepEquals(this.duplexPrint, other.duplexPrint) &&
            Utils.enhancedDeepEquals(this.envelopeName, other.envelopeName) &&
            Utils.enhancedDeepEquals(this.envelopeSize, other.envelopeSize) &&
            Utils.enhancedDeepEquals(this.envelopeGroupName, other.envelopeGroupName) &&
            Utils.enhancedDeepEquals(this.envelopeColorPrint, other.envelopeColorPrint);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, paperName,
            colorPrint, duplexPrint, envelopeName,
            envelopeSize, envelopeGroupName, envelopeColorPrint);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PredefinedConfig.class,
                "id", id,
                "name", name,
                "paperName", paperName,
                "colorPrint", colorPrint,
                "duplexPrint", duplexPrint,
                "envelopeName", envelopeName,
                "envelopeSize", envelopeSize,
                "envelopeGroupName", envelopeGroupName,
                "envelopeColorPrint", envelopeColorPrint);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long id;

        private String name;

        private String paperName;

        private Boolean colorPrint;

        private Boolean duplexPrint;

        private String envelopeName;

        private String envelopeSize;

        private String envelopeGroupName;

        private Boolean envelopeColorPrint;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique predefined configuration ID.
         */
        public Builder id(@Nullable Long id) {
            this.id = id;
            return this;
        }

        /**
         * Predefined configuration name.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Paper type name.
         */
        public Builder paperName(@Nullable String paperName) {
            this.paperName = paperName;
            return this;
        }

        /**
         * Print documents in color (`true`) or grayscale (`false`).
         */
        public Builder colorPrint(@Nullable Boolean colorPrint) {
            this.colorPrint = colorPrint;
            return this;
        }

        /**
         * Print documents duplex (`true`) or single-sided (`false`).
         */
        public Builder duplexPrint(@Nullable Boolean duplexPrint) {
            this.duplexPrint = duplexPrint;
            return this;
        }

        /**
         * Preferred envelope type name.
         */
        public Builder envelopeName(@Nullable String envelopeName) {
            this.envelopeName = envelopeName;
            return this;
        }

        /**
         * Preferred envelope size.
         */
        public Builder envelopeSize(@Nullable String envelopeSize) {
            this.envelopeSize = envelopeSize;
            return this;
        }

        /**
         * Envelope group name.
         */
        public Builder envelopeGroupName(@Nullable String envelopeGroupName) {
            this.envelopeGroupName = envelopeGroupName;
            return this;
        }

        /**
         * Print the envelope in color (`true`) or grayscale (`false`).
         */
        public Builder envelopeColorPrint(@Nullable Boolean envelopeColorPrint) {
            this.envelopeColorPrint = envelopeColorPrint;
            return this;
        }

        public PredefinedConfig build() {
            return new PredefinedConfig(
                id, name, paperName,
                colorPrint, duplexPrint, envelopeName,
                envelopeSize, envelopeGroupName, envelopeColorPrint);
        }

    }
}
