/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.postivo.sdk.utils.Utils;

/**
 * ShipmentCancellation
 * 
 * <p>Result of cancelling a single shipment
 */
public class ShipmentCancellation {
    /**
     * Shipment ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private String id;

    /**
     * Cancellation status code (`204` if cancelled successfully; otherwise an error code).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Long status;

    /**
     * Problem Details object (RFC 9457) describing the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private JsonNullable<ErrorResponse> error;

    @JsonCreator
    public ShipmentCancellation(
            @JsonProperty("id") @Nullable String id,
            @JsonProperty("status") @Nullable Long status,
            @JsonProperty("error") @Nullable JsonNullable<ErrorResponse> error) {
        this.id = id;
        this.status = status;
        this.error = Optional.ofNullable(error)
            .orElse(JsonNullable.undefined());
    }
    
    public ShipmentCancellation() {
        this(null, null, null);
    }

    /**
     * Shipment ID.
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Cancellation status code (`204` if cancelled successfully; otherwise an error code).
     */
    public Optional<Long> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Problem Details object (RFC 9457) describing the error.
     */
    public JsonNullable<ErrorResponse> error() {
        return this.error;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Shipment ID.
     */
    public ShipmentCancellation withId(@Nullable String id) {
        this.id = id;
        return this;
    }


    /**
     * Cancellation status code (`204` if cancelled successfully; otherwise an error code).
     */
    public ShipmentCancellation withStatus(@Nullable Long status) {
        this.status = status;
        return this;
    }


    /**
     * Problem Details object (RFC 9457) describing the error.
     */
    public ShipmentCancellation withError(@Nullable ErrorResponse error) {
        this.error = JsonNullable.of(error);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShipmentCancellation other = (ShipmentCancellation) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.error, other.error);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, status, error);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ShipmentCancellation.class,
                "id", id,
                "status", status,
                "error", error);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private Long status;

        private JsonNullable<ErrorResponse> error;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Shipment ID.
         */
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }

        /**
         * Cancellation status code (`204` if cancelled successfully; otherwise an error code).
         */
        public Builder status(@Nullable Long status) {
            this.status = status;
            return this;
        }

        /**
         * Problem Details object (RFC 9457) describing the error.
         */
        public Builder error(@Nullable ErrorResponse error) {
            this.error = JsonNullable.of(error);
            return this;
        }

        public ShipmentCancellation build() {
            return new ShipmentCancellation(
                id, status, error);
        }

    }
}
