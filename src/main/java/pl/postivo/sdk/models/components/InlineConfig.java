/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.Utils;

/**
 * InlineConfig
 * 
 * <p>Shipment configuration parameters. Overrides settings loaded from <code>predefined_config_id</code>.
 */
public class InlineConfig {
    /**
     * Preferred carrier identifier.
     */
    @JsonProperty("carrier_id")
    private long carrierId;

    /**
     * Preferred service identifier (shipment type).
     */
    @JsonProperty("service_id")
    private long serviceId;

    /**
     * Preferred paper type identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paper_id")
    private Long paperId;

    /**
     * Print documents in color (<code>true</code>) or grayscale (<code>false</code>).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color_print")
    private Boolean colorPrint;

    /**
     * Print documents duplex (<code>true</code>) or single-sided (<code>false</code>).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duplex_print")
    private Boolean duplexPrint;

    /**
     * Preferred envelope size/template identifier defined in the user account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envelope_id")
    private Long envelopeId;

    /**
     * Print the envelope in color (<code>true</code>) or grayscale (<code>false</code>).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envelope_color_print")
    private Boolean envelopeColorPrint;

    @JsonCreator
    public InlineConfig(
            @JsonProperty("carrier_id") long carrierId,
            @JsonProperty("service_id") long serviceId,
            @JsonProperty("paper_id") @Nullable Long paperId,
            @JsonProperty("color_print") @Nullable Boolean colorPrint,
            @JsonProperty("duplex_print") @Nullable Boolean duplexPrint,
            @JsonProperty("envelope_id") @Nullable Long envelopeId,
            @JsonProperty("envelope_color_print") @Nullable Boolean envelopeColorPrint) {
        this.carrierId = carrierId;
        this.serviceId = serviceId;
        this.paperId = paperId;
        this.colorPrint = colorPrint;
        this.duplexPrint = duplexPrint;
        this.envelopeId = envelopeId;
        this.envelopeColorPrint = envelopeColorPrint;
    }
    
    public InlineConfig(
            long carrierId,
            long serviceId) {
        this(carrierId, serviceId, null,
            null, null, null,
            null);
    }

    /**
     * Preferred carrier identifier.
     */
    public long carrierId() {
        return this.carrierId;
    }

    /**
     * Preferred service identifier (shipment type).
     */
    public long serviceId() {
        return this.serviceId;
    }

    /**
     * Preferred paper type identifier.
     */
    public Optional<Long> paperId() {
        return Optional.ofNullable(this.paperId);
    }

    /**
     * Print documents in color (<code>true</code>) or grayscale (<code>false</code>).
     */
    public Optional<Boolean> colorPrint() {
        return Optional.ofNullable(this.colorPrint);
    }

    /**
     * Print documents duplex (<code>true</code>) or single-sided (<code>false</code>).
     */
    public Optional<Boolean> duplexPrint() {
        return Optional.ofNullable(this.duplexPrint);
    }

    /**
     * Preferred envelope size/template identifier defined in the user account.
     */
    public Optional<Long> envelopeId() {
        return Optional.ofNullable(this.envelopeId);
    }

    /**
     * Print the envelope in color (<code>true</code>) or grayscale (<code>false</code>).
     */
    public Optional<Boolean> envelopeColorPrint() {
        return Optional.ofNullable(this.envelopeColorPrint);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Preferred carrier identifier.
     */
    public InlineConfig withCarrierId(long carrierId) {
        this.carrierId = carrierId;
        return this;
    }


    /**
     * Preferred service identifier (shipment type).
     */
    public InlineConfig withServiceId(long serviceId) {
        this.serviceId = serviceId;
        return this;
    }


    /**
     * Preferred paper type identifier.
     */
    public InlineConfig withPaperId(@Nullable Long paperId) {
        this.paperId = paperId;
        return this;
    }


    /**
     * Print documents in color (<code>true</code>) or grayscale (<code>false</code>).
     */
    public InlineConfig withColorPrint(@Nullable Boolean colorPrint) {
        this.colorPrint = colorPrint;
        return this;
    }


    /**
     * Print documents duplex (<code>true</code>) or single-sided (<code>false</code>).
     */
    public InlineConfig withDuplexPrint(@Nullable Boolean duplexPrint) {
        this.duplexPrint = duplexPrint;
        return this;
    }


    /**
     * Preferred envelope size/template identifier defined in the user account.
     */
    public InlineConfig withEnvelopeId(@Nullable Long envelopeId) {
        this.envelopeId = envelopeId;
        return this;
    }


    /**
     * Print the envelope in color (<code>true</code>) or grayscale (<code>false</code>).
     */
    public InlineConfig withEnvelopeColorPrint(@Nullable Boolean envelopeColorPrint) {
        this.envelopeColorPrint = envelopeColorPrint;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InlineConfig other = (InlineConfig) o;
        return 
            Utils.enhancedDeepEquals(this.carrierId, other.carrierId) &&
            Utils.enhancedDeepEquals(this.serviceId, other.serviceId) &&
            Utils.enhancedDeepEquals(this.paperId, other.paperId) &&
            Utils.enhancedDeepEquals(this.colorPrint, other.colorPrint) &&
            Utils.enhancedDeepEquals(this.duplexPrint, other.duplexPrint) &&
            Utils.enhancedDeepEquals(this.envelopeId, other.envelopeId) &&
            Utils.enhancedDeepEquals(this.envelopeColorPrint, other.envelopeColorPrint);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            carrierId, serviceId, paperId,
            colorPrint, duplexPrint, envelopeId,
            envelopeColorPrint);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InlineConfig.class,
                "carrierId", carrierId,
                "serviceId", serviceId,
                "paperId", paperId,
                "colorPrint", colorPrint,
                "duplexPrint", duplexPrint,
                "envelopeId", envelopeId,
                "envelopeColorPrint", envelopeColorPrint);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private long carrierId;

        private long serviceId;

        private Long paperId;

        private Boolean colorPrint;

        private Boolean duplexPrint;

        private Long envelopeId;

        private Boolean envelopeColorPrint;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Preferred carrier identifier.
         */
        public Builder carrierId(long carrierId) {
            this.carrierId = carrierId;
            return this;
        }

        /**
         * Preferred service identifier (shipment type).
         */
        public Builder serviceId(long serviceId) {
            this.serviceId = serviceId;
            return this;
        }

        /**
         * Preferred paper type identifier.
         */
        public Builder paperId(@Nullable Long paperId) {
            this.paperId = paperId;
            return this;
        }

        /**
         * Print documents in color (<code>true</code>) or grayscale (<code>false</code>).
         */
        public Builder colorPrint(@Nullable Boolean colorPrint) {
            this.colorPrint = colorPrint;
            return this;
        }

        /**
         * Print documents duplex (<code>true</code>) or single-sided (<code>false</code>).
         */
        public Builder duplexPrint(@Nullable Boolean duplexPrint) {
            this.duplexPrint = duplexPrint;
            return this;
        }

        /**
         * Preferred envelope size/template identifier defined in the user account.
         */
        public Builder envelopeId(@Nullable Long envelopeId) {
            this.envelopeId = envelopeId;
            return this;
        }

        /**
         * Print the envelope in color (<code>true</code>) or grayscale (<code>false</code>).
         */
        public Builder envelopeColorPrint(@Nullable Boolean envelopeColorPrint) {
            this.envelopeColorPrint = envelopeColorPrint;
            return this;
        }

        public InlineConfig build() {
            return new InlineConfig(
                carrierId, serviceId, paperId,
                colorPrint, duplexPrint, envelopeId,
                envelopeColorPrint);
        }

    }
}
