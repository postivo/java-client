/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.Utils;

/**
 * SenderDetails
 * 
 * <p>Extended sender details.
 */
public class SenderDetails {
    /**
     * Unique sender ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Long id;

    /**
     * Sender data for the shipment.
     */
    @JsonProperty("sender")
    private Sender sender;

    /**
     * Indicates whether the sender is active.
     */
    @JsonProperty("active")
    private boolean active;

    /**
     * Indicates whether this is the default sender.
     */
    @JsonProperty("default")
    private boolean default_;

    @JsonCreator
    public SenderDetails(
            @JsonProperty("id") @Nullable Long id,
            @JsonProperty("sender") @Nonnull Sender sender,
            @JsonProperty("active") boolean active,
            @JsonProperty("default") boolean default_) {
        this.id = id;
        this.sender = Optional.ofNullable(sender)
            .orElseThrow(() -> new IllegalArgumentException("sender cannot be null"));
        this.active = active;
        this.default_ = default_;
    }
    
    public SenderDetails(
            @Nonnull Sender sender,
            boolean active,
            boolean default_) {
        this(null, sender, active,
            default_);
    }

    /**
     * Unique sender ID.
     */
    public Optional<Long> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Sender data for the shipment.
     */
    public Sender sender() {
        return this.sender;
    }

    /**
     * Indicates whether the sender is active.
     */
    public boolean active() {
        return this.active;
    }

    /**
     * Indicates whether this is the default sender.
     */
    public boolean default_() {
        return this.default_;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique sender ID.
     */
    public SenderDetails withId(@Nullable Long id) {
        this.id = id;
        return this;
    }


    /**
     * Sender data for the shipment.
     */
    public SenderDetails withSender(@Nonnull Sender sender) {
        this.sender = Utils.checkNotNull(sender, "sender");
        return this;
    }


    /**
     * Indicates whether the sender is active.
     */
    public SenderDetails withActive(boolean active) {
        this.active = active;
        return this;
    }


    /**
     * Indicates whether this is the default sender.
     */
    public SenderDetails withDefault(boolean default_) {
        this.default_ = default_;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SenderDetails other = (SenderDetails) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.sender, other.sender) &&
            Utils.enhancedDeepEquals(this.active, other.active) &&
            Utils.enhancedDeepEquals(this.default_, other.default_);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, sender, active,
            default_);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SenderDetails.class,
                "id", id,
                "sender", sender,
                "active", active,
                "default_", default_);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long id;

        private Sender sender;

        private boolean active;

        private boolean default_;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique sender ID.
         */
        public Builder id(@Nullable Long id) {
            this.id = id;
            return this;
        }

        /**
         * Sender data for the shipment.
         */
        public Builder sender(@Nonnull Sender sender) {
            this.sender = Utils.checkNotNull(sender, "sender");
            return this;
        }

        /**
         * Indicates whether the sender is active.
         */
        public Builder active(boolean active) {
            this.active = active;
            return this;
        }

        /**
         * Indicates whether this is the default sender.
         */
        public Builder default_(boolean default_) {
            this.default_ = default_;
            return this;
        }

        public SenderDetails build() {
            return new SenderDetails(
                id, sender, active,
                default_);
        }

    }
}
