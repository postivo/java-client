/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.postivo.sdk.utils.LazySingletonValue;
import pl.postivo.sdk.utils.Utils;

/**
 * ContactResponse
 * 
 * <p>Contact details returned by the API for an Address Book entry.
 */
public class ContactResponse {
    /**
     * Name (person or company) — line 1.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * Name (person or company) — line 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name2")
    private JsonNullable<String> name2;

    /**
     * Street address.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("address")
    private JsonNullable<String> address;

    /**
     * Building number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("home_number")
    private JsonNullable<String> homeNumber;

    /**
     * Apartment (unit) number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flat_number")
    private JsonNullable<String> flatNumber;

    /**
     * Postal code. For <code>PL</code>, 5-digit values are normalized to the <code>NN-NNN</code> format.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("post_code")
    private JsonNullable<String> postCode;

    /**
     * City.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * Country code in ISO 3166-1 alpha-2 format. Default: "PL". Value is automatically uppercased.
     * 
     * <p>Full list: https://www.iso.org/iso-3166-country-codes.html
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * Phone number (E.164 format recommended).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private JsonNullable<String> phoneNumber;

    /**
     * Custom (external) contact ID; must be unique per contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ext_id")
    private JsonNullable<String> extId;

    /**
     * IDs of groups the contact belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_ids")
    private JsonNullable<List<Long>> groupIds;

    /**
     * Unique system-assigned contact ID.
     */
    @JsonProperty("id")
    private long id;

    @JsonCreator
    public ContactResponse(
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("name2") @Nullable JsonNullable<String> name2,
            @JsonProperty("address") @Nullable String address,
            @JsonProperty("home_number") @Nullable JsonNullable<String> homeNumber,
            @JsonProperty("flat_number") @Nullable JsonNullable<String> flatNumber,
            @JsonProperty("post_code") @Nullable String postCode,
            @JsonProperty("city") @Nullable String city,
            @JsonProperty("country") @Nullable JsonNullable<String> country,
            @JsonProperty("phone_number") @Nullable JsonNullable<String> phoneNumber,
            @JsonProperty("ext_id") @Nullable JsonNullable<String> extId,
            @JsonProperty("group_ids") @Nullable JsonNullable<List<Long>> groupIds,
            @JsonProperty("id") long id) {
        this.name = JsonNullable.of(name);
        this.name2 = Optional.ofNullable(name2)
            .orElse(JsonNullable.undefined());
        this.address = JsonNullable.of(address);
        this.homeNumber = Optional.ofNullable(homeNumber)
            .orElse(JsonNullable.undefined());
        this.flatNumber = Optional.ofNullable(flatNumber)
            .orElse(JsonNullable.undefined());
        this.postCode = JsonNullable.of(postCode);
        this.city = JsonNullable.of(city);
        this.country = Optional.ofNullable(country)
            .orElse(JsonNullable.of(Builder._SINGLETON_VALUE_Country.value()));
        this.phoneNumber = Optional.ofNullable(phoneNumber)
            .orElse(JsonNullable.undefined());
        this.extId = Optional.ofNullable(extId)
            .orElse(JsonNullable.undefined());
        this.groupIds = Optional.ofNullable(groupIds)
            .orElse(JsonNullable.undefined());
        this.id = id;
    }
    
    public ContactResponse(
            long id) {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, id);
    }

    /**
     * Name (person or company) — line 1.
     */
    public JsonNullable<String> name() {
        return this.name;
    }

    /**
     * Name (person or company) — line 2.
     */
    public JsonNullable<String> name2() {
        return this.name2;
    }

    /**
     * Street address.
     */
    public JsonNullable<String> address() {
        return this.address;
    }

    /**
     * Building number.
     */
    public JsonNullable<String> homeNumber() {
        return this.homeNumber;
    }

    /**
     * Apartment (unit) number.
     */
    public JsonNullable<String> flatNumber() {
        return this.flatNumber;
    }

    /**
     * Postal code. For <code>PL</code>, 5-digit values are normalized to the <code>NN-NNN</code> format.
     */
    public JsonNullable<String> postCode() {
        return this.postCode;
    }

    /**
     * City.
     */
    public JsonNullable<String> city() {
        return this.city;
    }

    /**
     * Country code in ISO 3166-1 alpha-2 format. Default: "PL". Value is automatically uppercased.
     * 
     * <p>Full list: https://www.iso.org/iso-3166-country-codes.html
     */
    public JsonNullable<String> country() {
        return this.country;
    }

    /**
     * Phone number (E.164 format recommended).
     */
    public JsonNullable<String> phoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Custom (external) contact ID; must be unique per contact.
     */
    public JsonNullable<String> extId() {
        return this.extId;
    }

    /**
     * IDs of groups the contact belongs to.
     */
    public JsonNullable<List<Long>> groupIds() {
        return this.groupIds;
    }

    /**
     * Unique system-assigned contact ID.
     */
    public long id() {
        return this.id;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Name (person or company) — line 1.
     */
    public ContactResponse withName(@Nullable String name) {
        this.name = JsonNullable.of(name);
        return this;
    }


    /**
     * Name (person or company) — line 2.
     */
    public ContactResponse withName2(@Nullable String name2) {
        this.name2 = JsonNullable.of(name2);
        return this;
    }


    /**
     * Street address.
     */
    public ContactResponse withAddress(@Nullable String address) {
        this.address = JsonNullable.of(address);
        return this;
    }


    /**
     * Building number.
     */
    public ContactResponse withHomeNumber(@Nullable String homeNumber) {
        this.homeNumber = JsonNullable.of(homeNumber);
        return this;
    }


    /**
     * Apartment (unit) number.
     */
    public ContactResponse withFlatNumber(@Nullable String flatNumber) {
        this.flatNumber = JsonNullable.of(flatNumber);
        return this;
    }


    /**
     * Postal code. For <code>PL</code>, 5-digit values are normalized to the <code>NN-NNN</code> format.
     */
    public ContactResponse withPostCode(@Nullable String postCode) {
        this.postCode = JsonNullable.of(postCode);
        return this;
    }


    /**
     * City.
     */
    public ContactResponse withCity(@Nullable String city) {
        this.city = JsonNullable.of(city);
        return this;
    }


    /**
     * Country code in ISO 3166-1 alpha-2 format. Default: "PL". Value is automatically uppercased.
     * 
     * <p>Full list: https://www.iso.org/iso-3166-country-codes.html
     */
    public ContactResponse withCountry(@Nullable String country) {
        this.country = JsonNullable.of(country);
        return this;
    }


    /**
     * Phone number (E.164 format recommended).
     */
    public ContactResponse withPhoneNumber(@Nullable String phoneNumber) {
        this.phoneNumber = JsonNullable.of(phoneNumber);
        return this;
    }


    /**
     * Custom (external) contact ID; must be unique per contact.
     */
    public ContactResponse withExtId(@Nullable String extId) {
        this.extId = JsonNullable.of(extId);
        return this;
    }


    /**
     * IDs of groups the contact belongs to.
     */
    public ContactResponse withGroupIds(@Nullable List<Long> groupIds) {
        this.groupIds = JsonNullable.of(groupIds);
        return this;
    }


    /**
     * Unique system-assigned contact ID.
     */
    public ContactResponse withId(long id) {
        this.id = id;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContactResponse other = (ContactResponse) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.name2, other.name2) &&
            Utils.enhancedDeepEquals(this.address, other.address) &&
            Utils.enhancedDeepEquals(this.homeNumber, other.homeNumber) &&
            Utils.enhancedDeepEquals(this.flatNumber, other.flatNumber) &&
            Utils.enhancedDeepEquals(this.postCode, other.postCode) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.phoneNumber, other.phoneNumber) &&
            Utils.enhancedDeepEquals(this.extId, other.extId) &&
            Utils.enhancedDeepEquals(this.groupIds, other.groupIds) &&
            Utils.enhancedDeepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, name2, address,
            homeNumber, flatNumber, postCode,
            city, country, phoneNumber,
            extId, groupIds, id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContactResponse.class,
                "name", name,
                "name2", name2,
                "address", address,
                "homeNumber", homeNumber,
                "flatNumber", flatNumber,
                "postCode", postCode,
                "city", city,
                "country", country,
                "phoneNumber", phoneNumber,
                "extId", extId,
                "groupIds", groupIds,
                "id", id);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private JsonNullable<String> name2;

        private String address;

        private JsonNullable<String> homeNumber;

        private JsonNullable<String> flatNumber;

        private String postCode;

        private String city;

        private JsonNullable<String> country;

        private JsonNullable<String> phoneNumber;

        private JsonNullable<String> extId;

        private JsonNullable<List<Long>> groupIds;

        private long id;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name (person or company) — line 1.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Name (person or company) — line 2.
         */
        public Builder name2(@Nullable String name2) {
            this.name2 = JsonNullable.of(name2);
            return this;
        }

        /**
         * Street address.
         */
        public Builder address(@Nullable String address) {
            this.address = address;
            return this;
        }

        /**
         * Building number.
         */
        public Builder homeNumber(@Nullable String homeNumber) {
            this.homeNumber = JsonNullable.of(homeNumber);
            return this;
        }

        /**
         * Apartment (unit) number.
         */
        public Builder flatNumber(@Nullable String flatNumber) {
            this.flatNumber = JsonNullable.of(flatNumber);
            return this;
        }

        /**
         * Postal code. For <code>PL</code>, 5-digit values are normalized to the <code>NN-NNN</code> format.
         */
        public Builder postCode(@Nullable String postCode) {
            this.postCode = postCode;
            return this;
        }

        /**
         * City.
         */
        public Builder city(@Nullable String city) {
            this.city = city;
            return this;
        }

        /**
         * Country code in ISO 3166-1 alpha-2 format. Default: "PL". Value is automatically uppercased.
         * 
         * <p>Full list: https://www.iso.org/iso-3166-country-codes.html
         */
        public Builder country(@Nullable String country) {
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Phone number (E.164 format recommended).
         */
        public Builder phoneNumber(@Nullable String phoneNumber) {
            this.phoneNumber = JsonNullable.of(phoneNumber);
            return this;
        }

        /**
         * Custom (external) contact ID; must be unique per contact.
         */
        public Builder extId(@Nullable String extId) {
            this.extId = JsonNullable.of(extId);
            return this;
        }

        /**
         * IDs of groups the contact belongs to.
         */
        public Builder groupIds(@Nullable List<Long> groupIds) {
            this.groupIds = JsonNullable.of(groupIds);
            return this;
        }

        /**
         * Unique system-assigned contact ID.
         */
        public Builder id(long id) {
            this.id = id;
            return this;
        }

        public ContactResponse build() {
            return new ContactResponse(
                name, name2, address,
                homeNumber, flatNumber, postCode,
                city, country, phoneNumber,
                extId, groupIds, id);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_Country =
                new LazySingletonValue<>(
                        "country",
                        "\"PL\"",
                        new TypeReference<String>() {});
    }
}
