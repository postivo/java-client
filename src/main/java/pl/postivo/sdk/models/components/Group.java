/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.postivo.sdk.utils.Utils;

/**
 * Group
 * 
 * <p>Contact group definition in the Address Book.
 */
public class Group {
    /**
     * Group name.
     */
    @JsonProperty("name")
    private String name;

    /**
     * Optional group description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    @JsonCreator
    public Group(
            @JsonProperty("name") @Nonnull String name,
            @JsonProperty("description") @Nullable JsonNullable<String> description) {
        this.name = Optional.ofNullable(name)
            .orElseThrow(() -> new IllegalArgumentException("name cannot be null"));
        this.description = Optional.ofNullable(description)
            .orElse(JsonNullable.undefined());
    }
    
    public Group(
            @Nonnull String name) {
        this(name, null);
    }

    /**
     * Group name.
     */
    public String name() {
        return this.name;
    }

    /**
     * Optional group description.
     */
    public JsonNullable<String> description() {
        return this.description;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Group name.
     */
    public Group withName(@Nonnull String name) {
        this.name = Utils.checkNotNull(name, "name");
        return this;
    }


    /**
     * Optional group description.
     */
    public Group withDescription(@Nullable String description) {
        this.description = JsonNullable.of(description);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Group other = (Group) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, description);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Group.class,
                "name", name,
                "description", description);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private JsonNullable<String> description;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Group name.
         */
        public Builder name(@Nonnull String name) {
            this.name = Utils.checkNotNull(name, "name");
            return this;
        }

        /**
         * Optional group description.
         */
        public Builder description(@Nullable String description) {
            this.description = JsonNullable.of(description);
            return this;
        }

        public Group build() {
            return new Group(
                name, description);
        }

    }
}
