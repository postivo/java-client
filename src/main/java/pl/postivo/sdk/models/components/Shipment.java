/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.postivo.sdk.utils.Utils;

/**
 * Shipment
 * 
 * <p>Properties of a new shipment.
 */
public class Shipment {
    /**
     * Recipient data for a single shipment. For one recipient, provide a <code>RecipientInline</code>,
     * <code>RecipientFromAddressBook</code>, or <code>RecipientFromAddressBookByExternalId</code> object. For multiple
     * recipients, provide an array of these objects (1–50).
     */
    @JsonProperty("recipients")
    private ShipmentRecipients recipients;

    /**
     * Document payload to print and enclose into shipment. For a single document, provide <code>DocumentPdf</code>,
     * <code>DocumentLibrary</code>, or <code>DocumentMock</code> (for checking the price only). For multiple documents, provide
     * an array of <code>DocumentPdf</code>, <code>DocumentLibrary</code>, or <code>DocumentMock</code> objects (1–20).
     */
    @JsonProperty("documents")
    private ShipmentDocuments documents;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private JsonNullable<Options> options;

    @JsonCreator
    public Shipment(
            @JsonProperty("recipients") @Nonnull ShipmentRecipients recipients,
            @JsonProperty("documents") @Nonnull ShipmentDocuments documents,
            @JsonProperty("options") @Nullable JsonNullable<Options> options) {
        this.recipients = Optional.ofNullable(recipients)
            .orElseThrow(() -> new IllegalArgumentException("recipients cannot be null"));
        this.documents = Optional.ofNullable(documents)
            .orElseThrow(() -> new IllegalArgumentException("documents cannot be null"));
        this.options = Optional.ofNullable(options)
            .orElse(JsonNullable.undefined());
    }
    
    public Shipment(
            @Nonnull ShipmentRecipients recipients,
            @Nonnull ShipmentDocuments documents) {
        this(recipients, documents, null);
    }

    /**
     * Recipient data for a single shipment. For one recipient, provide a <code>RecipientInline</code>,
     * <code>RecipientFromAddressBook</code>, or <code>RecipientFromAddressBookByExternalId</code> object. For multiple
     * recipients, provide an array of these objects (1–50).
     */
    public ShipmentRecipients recipients() {
        return this.recipients;
    }

    /**
     * Document payload to print and enclose into shipment. For a single document, provide <code>DocumentPdf</code>,
     * <code>DocumentLibrary</code>, or <code>DocumentMock</code> (for checking the price only). For multiple documents, provide
     * an array of <code>DocumentPdf</code>, <code>DocumentLibrary</code>, or <code>DocumentMock</code> objects (1–20).
     */
    public ShipmentDocuments documents() {
        return this.documents;
    }

    public JsonNullable<Options> options() {
        return this.options;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Recipient data for a single shipment. For one recipient, provide a <code>RecipientInline</code>,
     * <code>RecipientFromAddressBook</code>, or <code>RecipientFromAddressBookByExternalId</code> object. For multiple
     * recipients, provide an array of these objects (1–50).
     */
    public Shipment withRecipients(@Nonnull ShipmentRecipients recipients) {
        this.recipients = Utils.checkNotNull(recipients, "recipients");
        return this;
    }


    /**
     * Document payload to print and enclose into shipment. For a single document, provide <code>DocumentPdf</code>,
     * <code>DocumentLibrary</code>, or <code>DocumentMock</code> (for checking the price only). For multiple documents, provide
     * an array of <code>DocumentPdf</code>, <code>DocumentLibrary</code>, or <code>DocumentMock</code> objects (1–20).
     */
    public Shipment withDocuments(@Nonnull ShipmentDocuments documents) {
        this.documents = Utils.checkNotNull(documents, "documents");
        return this;
    }


    public Shipment withOptions(@Nullable Options options) {
        this.options = JsonNullable.of(options);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Shipment other = (Shipment) o;
        return 
            Utils.enhancedDeepEquals(this.recipients, other.recipients) &&
            Utils.enhancedDeepEquals(this.documents, other.documents) &&
            Utils.enhancedDeepEquals(this.options, other.options);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            recipients, documents, options);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Shipment.class,
                "recipients", recipients,
                "documents", documents,
                "options", options);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ShipmentRecipients recipients;

        private ShipmentDocuments documents;

        private JsonNullable<Options> options;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Recipient data for a single shipment. For one recipient, provide a <code>RecipientInline</code>,
         * <code>RecipientFromAddressBook</code>, or <code>RecipientFromAddressBookByExternalId</code> object. For multiple
         * recipients, provide an array of these objects (1–50).
         */
        public Builder recipients(@Nonnull ShipmentRecipients recipients) {
            this.recipients = Utils.checkNotNull(recipients, "recipients");
            return this;
        }

        /**
         * Document payload to print and enclose into shipment. For a single document, provide <code>DocumentPdf</code>,
         * <code>DocumentLibrary</code>, or <code>DocumentMock</code> (for checking the price only). For multiple documents, provide
         * an array of <code>DocumentPdf</code>, <code>DocumentLibrary</code>, or <code>DocumentMock</code> objects (1–20).
         */
        public Builder documents(@Nonnull ShipmentDocuments documents) {
            this.documents = Utils.checkNotNull(documents, "documents");
            return this;
        }

        public Builder options(@Nullable Options options) {
            this.options = JsonNullable.of(options);
            return this;
        }

        public Shipment build() {
            return new Shipment(
                recipients, documents, options);
        }

    }
}
