/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Float;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.postivo.sdk.utils.Utils;

/**
 * ShipmentDetails
 * 
 * <p>Single shipment details
 */
public class ShipmentDetails {
    /**
     * Unique shipment identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Custom shipment ID assigned by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_id")
    private JsonNullable<String> customId;

    /**
     * Carrier-provided shipment tracking number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_number")
    private JsonNullable<String> trackingNumber;

    /**
     * Recipient data for a shipment, including full postal address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient")
    private Recipient recipient;

    /**
     * Sender data for the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sender")
    private Sender sender;

    /**
     * Shipment processing status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private ShipmentDetailsStatus status;

    /**
     * Postal operator handling the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier")
    private ShipmentDetailsCarrier carrier;

    /**
     * Service (shipment type) used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service")
    private ShipmentDetailsService service;

    /**
     * Dispatch date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dispatch_date")
    private JsonNullable<LocalDate> dispatchDate;

    /**
     * Total number of pages across all documents in the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_number")
    private Long pageNumber;

    /**
     * Shipment price (PLN).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    private Float price;

    @JsonCreator
    public ShipmentDetails(
            @JsonProperty("id") @Nullable JsonNullable<String> id,
            @JsonProperty("custom_id") @Nullable JsonNullable<String> customId,
            @JsonProperty("tracking_number") @Nullable JsonNullable<String> trackingNumber,
            @JsonProperty("recipient") @Nullable Recipient recipient,
            @JsonProperty("sender") @Nullable Sender sender,
            @JsonProperty("status") @Nullable ShipmentDetailsStatus status,
            @JsonProperty("carrier") @Nullable ShipmentDetailsCarrier carrier,
            @JsonProperty("service") @Nullable ShipmentDetailsService service,
            @JsonProperty("dispatch_date") @Nullable JsonNullable<LocalDate> dispatchDate,
            @JsonProperty("page_number") @Nullable Long pageNumber,
            @JsonProperty("price") @Nullable Float price) {
        this.id = Optional.ofNullable(id)
            .orElse(JsonNullable.undefined());
        this.customId = Optional.ofNullable(customId)
            .orElse(JsonNullable.undefined());
        this.trackingNumber = Optional.ofNullable(trackingNumber)
            .orElse(JsonNullable.undefined());
        this.recipient = recipient;
        this.sender = sender;
        this.status = status;
        this.carrier = carrier;
        this.service = service;
        this.dispatchDate = Optional.ofNullable(dispatchDate)
            .orElse(JsonNullable.undefined());
        this.pageNumber = pageNumber;
        this.price = price;
    }
    
    public ShipmentDetails() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * Unique shipment identifier.
     */
    public JsonNullable<String> id() {
        return this.id;
    }

    /**
     * Custom shipment ID assigned by the user.
     */
    public JsonNullable<String> customId() {
        return this.customId;
    }

    /**
     * Carrier-provided shipment tracking number.
     */
    public JsonNullable<String> trackingNumber() {
        return this.trackingNumber;
    }

    /**
     * Recipient data for a shipment, including full postal address.
     */
    public Optional<Recipient> recipient() {
        return Optional.ofNullable(this.recipient);
    }

    /**
     * Sender data for the shipment.
     */
    public Optional<Sender> sender() {
        return Optional.ofNullable(this.sender);
    }

    /**
     * Shipment processing status.
     */
    public Optional<ShipmentDetailsStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Postal operator handling the shipment.
     */
    public Optional<ShipmentDetailsCarrier> carrier() {
        return Optional.ofNullable(this.carrier);
    }

    /**
     * Service (shipment type) used.
     */
    public Optional<ShipmentDetailsService> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * Dispatch date.
     */
    public JsonNullable<LocalDate> dispatchDate() {
        return this.dispatchDate;
    }

    /**
     * Total number of pages across all documents in the shipment.
     */
    public Optional<Long> pageNumber() {
        return Optional.ofNullable(this.pageNumber);
    }

    /**
     * Shipment price (PLN).
     */
    public Optional<Float> price() {
        return Optional.ofNullable(this.price);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique shipment identifier.
     */
    public ShipmentDetails withId(@Nullable String id) {
        this.id = JsonNullable.of(id);
        return this;
    }


    /**
     * Custom shipment ID assigned by the user.
     */
    public ShipmentDetails withCustomId(@Nullable String customId) {
        this.customId = JsonNullable.of(customId);
        return this;
    }


    /**
     * Carrier-provided shipment tracking number.
     */
    public ShipmentDetails withTrackingNumber(@Nullable String trackingNumber) {
        this.trackingNumber = JsonNullable.of(trackingNumber);
        return this;
    }


    /**
     * Recipient data for a shipment, including full postal address.
     */
    public ShipmentDetails withRecipient(@Nullable Recipient recipient) {
        this.recipient = recipient;
        return this;
    }


    /**
     * Sender data for the shipment.
     */
    public ShipmentDetails withSender(@Nullable Sender sender) {
        this.sender = sender;
        return this;
    }


    /**
     * Shipment processing status.
     */
    public ShipmentDetails withStatus(@Nullable ShipmentDetailsStatus status) {
        this.status = status;
        return this;
    }


    /**
     * Postal operator handling the shipment.
     */
    public ShipmentDetails withCarrier(@Nullable ShipmentDetailsCarrier carrier) {
        this.carrier = carrier;
        return this;
    }


    /**
     * Service (shipment type) used.
     */
    public ShipmentDetails withService(@Nullable ShipmentDetailsService service) {
        this.service = service;
        return this;
    }


    /**
     * Dispatch date.
     */
    public ShipmentDetails withDispatchDate(@Nullable LocalDate dispatchDate) {
        this.dispatchDate = JsonNullable.of(dispatchDate);
        return this;
    }


    /**
     * Total number of pages across all documents in the shipment.
     */
    public ShipmentDetails withPageNumber(@Nullable Long pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }


    /**
     * Shipment price (PLN).
     */
    public ShipmentDetails withPrice(@Nullable Float price) {
        this.price = price;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShipmentDetails other = (ShipmentDetails) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.customId, other.customId) &&
            Utils.enhancedDeepEquals(this.trackingNumber, other.trackingNumber) &&
            Utils.enhancedDeepEquals(this.recipient, other.recipient) &&
            Utils.enhancedDeepEquals(this.sender, other.sender) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.carrier, other.carrier) &&
            Utils.enhancedDeepEquals(this.service, other.service) &&
            Utils.enhancedDeepEquals(this.dispatchDate, other.dispatchDate) &&
            Utils.enhancedDeepEquals(this.pageNumber, other.pageNumber) &&
            Utils.enhancedDeepEquals(this.price, other.price);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, customId, trackingNumber,
            recipient, sender, status,
            carrier, service, dispatchDate,
            pageNumber, price);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ShipmentDetails.class,
                "id", id,
                "customId", customId,
                "trackingNumber", trackingNumber,
                "recipient", recipient,
                "sender", sender,
                "status", status,
                "carrier", carrier,
                "service", service,
                "dispatchDate", dispatchDate,
                "pageNumber", pageNumber,
                "price", price);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id;

        private JsonNullable<String> customId;

        private JsonNullable<String> trackingNumber;

        private Recipient recipient;

        private Sender sender;

        private ShipmentDetailsStatus status;

        private ShipmentDetailsCarrier carrier;

        private ShipmentDetailsService service;

        private JsonNullable<LocalDate> dispatchDate;

        private Long pageNumber;

        private Float price;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique shipment identifier.
         */
        public Builder id(@Nullable String id) {
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Custom shipment ID assigned by the user.
         */
        public Builder customId(@Nullable String customId) {
            this.customId = JsonNullable.of(customId);
            return this;
        }

        /**
         * Carrier-provided shipment tracking number.
         */
        public Builder trackingNumber(@Nullable String trackingNumber) {
            this.trackingNumber = JsonNullable.of(trackingNumber);
            return this;
        }

        /**
         * Recipient data for a shipment, including full postal address.
         */
        public Builder recipient(@Nullable Recipient recipient) {
            this.recipient = recipient;
            return this;
        }

        /**
         * Sender data for the shipment.
         */
        public Builder sender(@Nullable Sender sender) {
            this.sender = sender;
            return this;
        }

        /**
         * Shipment processing status.
         */
        public Builder status(@Nullable ShipmentDetailsStatus status) {
            this.status = status;
            return this;
        }

        /**
         * Postal operator handling the shipment.
         */
        public Builder carrier(@Nullable ShipmentDetailsCarrier carrier) {
            this.carrier = carrier;
            return this;
        }

        /**
         * Service (shipment type) used.
         */
        public Builder service(@Nullable ShipmentDetailsService service) {
            this.service = service;
            return this;
        }

        /**
         * Dispatch date.
         */
        public Builder dispatchDate(@Nullable LocalDate dispatchDate) {
            this.dispatchDate = JsonNullable.of(dispatchDate);
            return this;
        }

        /**
         * Total number of pages across all documents in the shipment.
         */
        public Builder pageNumber(@Nullable Long pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        /**
         * Shipment price (PLN).
         */
        public Builder price(@Nullable Float price) {
            this.price = price;
            return this;
        }

        public ShipmentDetails build() {
            return new ShipmentDetails(
                id, customId, trackingNumber,
                recipient, sender, status,
                carrier, service, dispatchDate,
                pageNumber, price);
        }

    }
}
