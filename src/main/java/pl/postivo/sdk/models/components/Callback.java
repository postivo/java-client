/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.postivo.sdk.utils.LazySingletonValue;
import pl.postivo.sdk.utils.Utils;

/**
 * Callback
 * 
 * <p>Per-shipment callback configuration. When set, overrides the global callback defined in the user
 * account.
 */
public class Callback {
    /**
     * Callback target URL.
     */
    @JsonProperty("url")
    private String url;

    /**
     * Bearer token to include in callback requests for authentication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_token")
    private JsonNullable<String> userToken;

    @JsonCreator
    public Callback(
            @JsonProperty("url") @Nonnull String url,
            @JsonProperty("user_token") @Nullable JsonNullable<String> userToken) {
        this.url = Optional.ofNullable(url)
            .orElseThrow(() -> new IllegalArgumentException("url cannot be null"));
        this.userToken = Optional.ofNullable(userToken)
            .orElse(JsonNullable.of(Builder._SINGLETON_VALUE_UserToken.value()));
    }
    
    public Callback(
            @Nonnull String url) {
        this(url, null);
    }

    /**
     * Callback target URL.
     */
    public String url() {
        return this.url;
    }

    /**
     * Bearer token to include in callback requests for authentication.
     */
    public JsonNullable<String> userToken() {
        return this.userToken;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Callback target URL.
     */
    public Callback withUrl(@Nonnull String url) {
        this.url = Utils.checkNotNull(url, "url");
        return this;
    }


    /**
     * Bearer token to include in callback requests for authentication.
     */
    public Callback withUserToken(@Nullable String userToken) {
        this.userToken = JsonNullable.of(userToken);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Callback other = (Callback) o;
        return 
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.userToken, other.userToken);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            url, userToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Callback.class,
                "url", url,
                "userToken", userToken);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String url;

        private JsonNullable<String> userToken;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Callback target URL.
         */
        public Builder url(@Nonnull String url) {
            this.url = Utils.checkNotNull(url, "url");
            return this;
        }

        /**
         * Bearer token to include in callback requests for authentication.
         */
        public Builder userToken(@Nullable String userToken) {
            this.userToken = JsonNullable.of(userToken);
            return this;
        }

        public Callback build() {
            return new Callback(
                url, userToken);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_UserToken =
                new LazySingletonValue<>(
                        "user_token",
                        "null",
                        new TypeReference<String>() {});
    }
}
