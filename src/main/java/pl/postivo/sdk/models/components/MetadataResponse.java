/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.postivo.sdk.utils.Utils;

/**
 * MetadataResponse
 * 
 * <p>Metadata response.
 */
public class MetadataResponse {
    /**
     * List of carriers and their available services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carriers")
    private JsonNullable<List<MetadataResponseCarrier>> carriers;

    /**
     * Available paper types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("papers")
    private JsonNullable<List<Paper>> papers;

    /**
     * Envelope template groups, each containing related templates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envelope_templates")
    private JsonNullable<List<EnvelopeTemplate>> envelopeTemplates;

    /**
     * Available status codes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_codes")
    private JsonNullable<List<StatusCode>> statusCodes;

    @JsonCreator
    public MetadataResponse(
            @JsonProperty("carriers") @Nullable JsonNullable<List<MetadataResponseCarrier>> carriers,
            @JsonProperty("papers") @Nullable JsonNullable<List<Paper>> papers,
            @JsonProperty("envelope_templates") @Nullable JsonNullable<List<EnvelopeTemplate>> envelopeTemplates,
            @JsonProperty("status_codes") @Nullable JsonNullable<List<StatusCode>> statusCodes) {
        this.carriers = Optional.ofNullable(carriers)
            .orElse(JsonNullable.undefined());
        this.papers = Optional.ofNullable(papers)
            .orElse(JsonNullable.undefined());
        this.envelopeTemplates = Optional.ofNullable(envelopeTemplates)
            .orElse(JsonNullable.undefined());
        this.statusCodes = Optional.ofNullable(statusCodes)
            .orElse(JsonNullable.undefined());
    }
    
    public MetadataResponse() {
        this(null, null, null,
            null);
    }

    /**
     * List of carriers and their available services.
     */
    public JsonNullable<List<MetadataResponseCarrier>> carriers() {
        return this.carriers;
    }

    /**
     * Available paper types.
     */
    public JsonNullable<List<Paper>> papers() {
        return this.papers;
    }

    /**
     * Envelope template groups, each containing related templates.
     */
    public JsonNullable<List<EnvelopeTemplate>> envelopeTemplates() {
        return this.envelopeTemplates;
    }

    /**
     * Available status codes.
     */
    public JsonNullable<List<StatusCode>> statusCodes() {
        return this.statusCodes;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * List of carriers and their available services.
     */
    public MetadataResponse withCarriers(@Nullable List<MetadataResponseCarrier> carriers) {
        this.carriers = JsonNullable.of(carriers);
        return this;
    }


    /**
     * Available paper types.
     */
    public MetadataResponse withPapers(@Nullable List<Paper> papers) {
        this.papers = JsonNullable.of(papers);
        return this;
    }


    /**
     * Envelope template groups, each containing related templates.
     */
    public MetadataResponse withEnvelopeTemplates(@Nullable List<EnvelopeTemplate> envelopeTemplates) {
        this.envelopeTemplates = JsonNullable.of(envelopeTemplates);
        return this;
    }


    /**
     * Available status codes.
     */
    public MetadataResponse withStatusCodes(@Nullable List<StatusCode> statusCodes) {
        this.statusCodes = JsonNullable.of(statusCodes);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MetadataResponse other = (MetadataResponse) o;
        return 
            Utils.enhancedDeepEquals(this.carriers, other.carriers) &&
            Utils.enhancedDeepEquals(this.papers, other.papers) &&
            Utils.enhancedDeepEquals(this.envelopeTemplates, other.envelopeTemplates) &&
            Utils.enhancedDeepEquals(this.statusCodes, other.statusCodes);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            carriers, papers, envelopeTemplates,
            statusCodes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MetadataResponse.class,
                "carriers", carriers,
                "papers", papers,
                "envelopeTemplates", envelopeTemplates,
                "statusCodes", statusCodes);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<List<MetadataResponseCarrier>> carriers;

        private JsonNullable<List<Paper>> papers;

        private JsonNullable<List<EnvelopeTemplate>> envelopeTemplates;

        private JsonNullable<List<StatusCode>> statusCodes;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of carriers and their available services.
         */
        public Builder carriers(@Nullable List<MetadataResponseCarrier> carriers) {
            this.carriers = JsonNullable.of(carriers);
            return this;
        }

        /**
         * Available paper types.
         */
        public Builder papers(@Nullable List<Paper> papers) {
            this.papers = JsonNullable.of(papers);
            return this;
        }

        /**
         * Envelope template groups, each containing related templates.
         */
        public Builder envelopeTemplates(@Nullable List<EnvelopeTemplate> envelopeTemplates) {
            this.envelopeTemplates = JsonNullable.of(envelopeTemplates);
            return this;
        }

        /**
         * Available status codes.
         */
        public Builder statusCodes(@Nullable List<StatusCode> statusCodes) {
            this.statusCodes = JsonNullable.of(statusCodes);
            return this;
        }

        public MetadataResponse build() {
            return new MetadataResponse(
                carriers, papers, envelopeTemplates,
                statusCodes);
        }

    }
}
