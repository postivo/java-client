/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.postivo.sdk.utils.LazySingletonValue;
import pl.postivo.sdk.utils.Utils;

/**
 * DocumentPdf
 * 
 * <p>PDF document payload.
 */
public class DocumentPdf {
    /**
     * Base64-encoded PDF content.
     */
    @JsonProperty("file_stream")
    private String fileStream;

    /**
     * Optional file name for identification purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_name")
    private JsonNullable<String> fileName;

    @JsonCreator
    public DocumentPdf(
            @JsonProperty("file_stream") @Nonnull String fileStream,
            @JsonProperty("file_name") @Nullable JsonNullable<String> fileName) {
        this.fileStream = Optional.ofNullable(fileStream)
            .orElseThrow(() -> new IllegalArgumentException("fileStream cannot be null"));
        this.fileName = Optional.ofNullable(fileName)
            .orElse(JsonNullable.of(Builder._SINGLETON_VALUE_FileName.value()));
    }
    
    public DocumentPdf(
            @Nonnull String fileStream) {
        this(fileStream, null);
    }

    /**
     * Base64-encoded PDF content.
     */
    public String fileStream() {
        return this.fileStream;
    }

    /**
     * Optional file name for identification purposes.
     */
    public JsonNullable<String> fileName() {
        return this.fileName;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Base64-encoded PDF content.
     */
    public DocumentPdf withFileStream(@Nonnull String fileStream) {
        this.fileStream = Utils.checkNotNull(fileStream, "fileStream");
        return this;
    }


    /**
     * Optional file name for identification purposes.
     */
    public DocumentPdf withFileName(@Nullable String fileName) {
        this.fileName = JsonNullable.of(fileName);
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentPdf other = (DocumentPdf) o;
        return 
            Utils.enhancedDeepEquals(this.fileStream, other.fileStream) &&
            Utils.enhancedDeepEquals(this.fileName, other.fileName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileStream, fileName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentPdf.class,
                "fileStream", fileStream,
                "fileName", fileName);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String fileStream;

        private JsonNullable<String> fileName;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Base64-encoded PDF content.
         */
        public Builder fileStream(@Nonnull String fileStream) {
            this.fileStream = Utils.checkNotNull(fileStream, "fileStream");
            return this;
        }

        /**
         * Optional file name for identification purposes.
         */
        public Builder fileName(@Nullable String fileName) {
            this.fileName = JsonNullable.of(fileName);
            return this;
        }

        public DocumentPdf build() {
            return new DocumentPdf(
                fileStream, fileName);
        }


        private static final LazySingletonValue<String> _SINGLETON_VALUE_FileName =
                new LazySingletonValue<>(
                        "file_name",
                        "null",
                        new TypeReference<String>() {});
    }
}
