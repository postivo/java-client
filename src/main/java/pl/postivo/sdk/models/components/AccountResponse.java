/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.postivo.sdk.utils.Utils;

/**
 * AccountResponse
 * 
 * <p>Account details, including balance and limits.
 */
public class AccountResponse {
    /**
     * User login.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("login")
    private String login;

    /**
     * Account type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_type")
    private AccountType accountType;

    /**
     * Account limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    private Float limit;

    /**
     * Current account balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credit")
    private Float credit;

    /**
     * Subaccount credit balance; null if unlimited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subcredit")
    private JsonNullable<Float> subcredit;

    /**
     * Account currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private String currency;

    /**
     * User full name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    /**
     * Indicates whether this is the main account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_main")
    private Boolean isMain;

    @JsonCreator
    public AccountResponse(
            @JsonProperty("login") @Nullable String login,
            @JsonProperty("account_type") @Nullable AccountType accountType,
            @JsonProperty("limit") @Nullable Float limit,
            @JsonProperty("credit") @Nullable Float credit,
            @JsonProperty("subcredit") @Nullable JsonNullable<Float> subcredit,
            @JsonProperty("currency") @Nullable String currency,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("is_main") @Nullable Boolean isMain) {
        this.login = login;
        this.accountType = accountType;
        this.limit = limit;
        this.credit = credit;
        this.subcredit = Optional.ofNullable(subcredit)
            .orElse(JsonNullable.undefined());
        this.currency = currency;
        this.name = name;
        this.isMain = isMain;
    }
    
    public AccountResponse() {
        this(null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * User login.
     */
    public Optional<String> login() {
        return Optional.ofNullable(this.login);
    }

    /**
     * Account type.
     */
    public Optional<AccountType> accountType() {
        return Optional.ofNullable(this.accountType);
    }

    /**
     * Account limit.
     */
    public Optional<Float> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * Current account balance.
     */
    public Optional<Float> credit() {
        return Optional.ofNullable(this.credit);
    }

    /**
     * Subaccount credit balance; null if unlimited.
     */
    public JsonNullable<Float> subcredit() {
        return this.subcredit;
    }

    /**
     * Account currency.
     */
    public Optional<String> currency() {
        return Optional.ofNullable(this.currency);
    }

    /**
     * User full name.
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Indicates whether this is the main account.
     */
    public Optional<Boolean> isMain() {
        return Optional.ofNullable(this.isMain);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * User login.
     */
    public AccountResponse withLogin(@Nullable String login) {
        this.login = login;
        return this;
    }


    /**
     * Account type.
     */
    public AccountResponse withAccountType(@Nullable AccountType accountType) {
        this.accountType = accountType;
        return this;
    }


    /**
     * Account limit.
     */
    public AccountResponse withLimit(@Nullable Float limit) {
        this.limit = limit;
        return this;
    }


    /**
     * Current account balance.
     */
    public AccountResponse withCredit(@Nullable Float credit) {
        this.credit = credit;
        return this;
    }


    /**
     * Subaccount credit balance; null if unlimited.
     */
    public AccountResponse withSubcredit(@Nullable Float subcredit) {
        this.subcredit = JsonNullable.of(subcredit);
        return this;
    }


    /**
     * Account currency.
     */
    public AccountResponse withCurrency(@Nullable String currency) {
        this.currency = currency;
        return this;
    }


    /**
     * User full name.
     */
    public AccountResponse withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * Indicates whether this is the main account.
     */
    public AccountResponse withIsMain(@Nullable Boolean isMain) {
        this.isMain = isMain;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountResponse other = (AccountResponse) o;
        return 
            Utils.enhancedDeepEquals(this.login, other.login) &&
            Utils.enhancedDeepEquals(this.accountType, other.accountType) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.credit, other.credit) &&
            Utils.enhancedDeepEquals(this.subcredit, other.subcredit) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.isMain, other.isMain);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            login, accountType, limit,
            credit, subcredit, currency,
            name, isMain);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountResponse.class,
                "login", login,
                "accountType", accountType,
                "limit", limit,
                "credit", credit,
                "subcredit", subcredit,
                "currency", currency,
                "name", name,
                "isMain", isMain);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String login;

        private AccountType accountType;

        private Float limit;

        private Float credit;

        private JsonNullable<Float> subcredit;

        private String currency;

        private String name;

        private Boolean isMain;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * User login.
         */
        public Builder login(@Nullable String login) {
            this.login = login;
            return this;
        }

        /**
         * Account type.
         */
        public Builder accountType(@Nullable AccountType accountType) {
            this.accountType = accountType;
            return this;
        }

        /**
         * Account limit.
         */
        public Builder limit(@Nullable Float limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Current account balance.
         */
        public Builder credit(@Nullable Float credit) {
            this.credit = credit;
            return this;
        }

        /**
         * Subaccount credit balance; null if unlimited.
         */
        public Builder subcredit(@Nullable Float subcredit) {
            this.subcredit = JsonNullable.of(subcredit);
            return this;
        }

        /**
         * Account currency.
         */
        public Builder currency(@Nullable String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * User full name.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Indicates whether this is the main account.
         */
        public Builder isMain(@Nullable Boolean isMain) {
            this.isMain = isMain;
            return this;
        }

        public AccountResponse build() {
            return new AccountResponse(
                login, accountType, limit,
                credit, subcredit, currency,
                name, isMain);
        }

    }
}
