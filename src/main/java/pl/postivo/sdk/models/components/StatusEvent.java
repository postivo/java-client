/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.postivo.sdk.utils.Utils;

/**
 * StatusEvent
 * 
 * <p>Single shipment status event.
 */
public class StatusEvent {
    /**
     * Unique status event ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unique_id")
    private Long uniqueId;

    /**
     * Event type: `OK` (regular) or `EX` (exception/irregular).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private String type;

    /**
     * Status event code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private String code;

    /**
     * Status event description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    /**
     * Status event details (for EXTERNAL status codes).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    private JsonNullable<String> details;

    /**
     * Status event timestamp (UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private OffsetDateTime date;

    @JsonCreator
    public StatusEvent(
            @JsonProperty("unique_id") @Nullable Long uniqueId,
            @JsonProperty("type") @Nullable String type,
            @JsonProperty("code") @Nullable String code,
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("details") @Nullable JsonNullable<String> details,
            @JsonProperty("date") @Nullable OffsetDateTime date) {
        this.uniqueId = uniqueId;
        this.type = type;
        this.code = code;
        this.name = name;
        this.details = Optional.ofNullable(details)
            .orElse(JsonNullable.undefined());
        this.date = date;
    }
    
    public StatusEvent() {
        this(null, null, null,
            null, null, null);
    }

    /**
     * Unique status event ID.
     */
    public Optional<Long> uniqueId() {
        return Optional.ofNullable(this.uniqueId);
    }

    /**
     * Event type: `OK` (regular) or `EX` (exception/irregular).
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Status event code.
     */
    public Optional<String> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * Status event description.
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Status event details (for EXTERNAL status codes).
     */
    public JsonNullable<String> details() {
        return this.details;
    }

    /**
     * Status event timestamp (UTC).
     */
    public Optional<OffsetDateTime> date() {
        return Optional.ofNullable(this.date);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique status event ID.
     */
    public StatusEvent withUniqueId(@Nullable Long uniqueId) {
        this.uniqueId = uniqueId;
        return this;
    }


    /**
     * Event type: `OK` (regular) or `EX` (exception/irregular).
     */
    public StatusEvent withType(@Nullable String type) {
        this.type = type;
        return this;
    }


    /**
     * Status event code.
     */
    public StatusEvent withCode(@Nullable String code) {
        this.code = code;
        return this;
    }


    /**
     * Status event description.
     */
    public StatusEvent withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * Status event details (for EXTERNAL status codes).
     */
    public StatusEvent withDetails(@Nullable String details) {
        this.details = JsonNullable.of(details);
        return this;
    }


    /**
     * Status event timestamp (UTC).
     */
    public StatusEvent withDate(@Nullable OffsetDateTime date) {
        this.date = date;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StatusEvent other = (StatusEvent) o;
        return 
            Utils.enhancedDeepEquals(this.uniqueId, other.uniqueId) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.details, other.details) &&
            Utils.enhancedDeepEquals(this.date, other.date);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            uniqueId, type, code,
            name, details, date);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StatusEvent.class,
                "uniqueId", uniqueId,
                "type", type,
                "code", code,
                "name", name,
                "details", details,
                "date", date);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long uniqueId;

        private String type;

        private String code;

        private String name;

        private JsonNullable<String> details;

        private OffsetDateTime date;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique status event ID.
         */
        public Builder uniqueId(@Nullable Long uniqueId) {
            this.uniqueId = uniqueId;
            return this;
        }

        /**
         * Event type: `OK` (regular) or `EX` (exception/irregular).
         */
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }

        /**
         * Status event code.
         */
        public Builder code(@Nullable String code) {
            this.code = code;
            return this;
        }

        /**
         * Status event description.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Status event details (for EXTERNAL status codes).
         */
        public Builder details(@Nullable String details) {
            this.details = JsonNullable.of(details);
            return this;
        }

        /**
         * Status event timestamp (UTC).
         */
        public Builder date(@Nullable OffsetDateTime date) {
            this.date = date;
            return this;
        }

        public StatusEvent build() {
            return new StatusEvent(
                uniqueId, type, code,
                name, details, date);
        }

    }
}
