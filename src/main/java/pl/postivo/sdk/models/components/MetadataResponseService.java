/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Float;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.Utils;


public class MetadataResponseService {
    /**
     * Unique service (dispatch type) identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_id")
    private Long serviceId;

    /**
     * Service (dispatch type) name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_name")
    private String serviceName;

    /**
     * Return fee charged when the shipment is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_return_fee")
    private Float serviceReturnFee;

    @JsonCreator
    public MetadataResponseService(
            @JsonProperty("service_id") @Nullable Long serviceId,
            @JsonProperty("service_name") @Nullable String serviceName,
            @JsonProperty("service_return_fee") @Nullable Float serviceReturnFee) {
        this.serviceId = serviceId;
        this.serviceName = serviceName;
        this.serviceReturnFee = serviceReturnFee;
    }
    
    public MetadataResponseService() {
        this(null, null, null);
    }

    /**
     * Unique service (dispatch type) identifier.
     */
    public Optional<Long> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * Service (dispatch type) name.
     */
    public Optional<String> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Return fee charged when the shipment is returned.
     */
    public Optional<Float> serviceReturnFee() {
        return Optional.ofNullable(this.serviceReturnFee);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique service (dispatch type) identifier.
     */
    public MetadataResponseService withServiceId(@Nullable Long serviceId) {
        this.serviceId = serviceId;
        return this;
    }


    /**
     * Service (dispatch type) name.
     */
    public MetadataResponseService withServiceName(@Nullable String serviceName) {
        this.serviceName = serviceName;
        return this;
    }


    /**
     * Return fee charged when the shipment is returned.
     */
    public MetadataResponseService withServiceReturnFee(@Nullable Float serviceReturnFee) {
        this.serviceReturnFee = serviceReturnFee;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MetadataResponseService other = (MetadataResponseService) o;
        return 
            Utils.enhancedDeepEquals(this.serviceId, other.serviceId) &&
            Utils.enhancedDeepEquals(this.serviceName, other.serviceName) &&
            Utils.enhancedDeepEquals(this.serviceReturnFee, other.serviceReturnFee);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            serviceId, serviceName, serviceReturnFee);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MetadataResponseService.class,
                "serviceId", serviceId,
                "serviceName", serviceName,
                "serviceReturnFee", serviceReturnFee);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long serviceId;

        private String serviceName;

        private Float serviceReturnFee;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique service (dispatch type) identifier.
         */
        public Builder serviceId(@Nullable Long serviceId) {
            this.serviceId = serviceId;
            return this;
        }

        /**
         * Service (dispatch type) name.
         */
        public Builder serviceName(@Nullable String serviceName) {
            this.serviceName = serviceName;
            return this;
        }

        /**
         * Return fee charged when the shipment is returned.
         */
        public Builder serviceReturnFee(@Nullable Float serviceReturnFee) {
            this.serviceReturnFee = serviceReturnFee;
            return this;
        }

        public MetadataResponseService build() {
            return new MetadataResponseService(
                serviceId, serviceName, serviceReturnFee);
        }

    }
}
