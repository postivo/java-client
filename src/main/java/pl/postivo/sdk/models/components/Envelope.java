/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.Utils;


public class Envelope {
    /**
     * Unique envelope template identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envelope_id")
    private Long envelopeId;

    /**
     * Envelope template name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envelope_name")
    private String envelopeName;

    /**
     * Maximum number of sheets supported by this envelope type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_sheets")
    private Long maxSheets;

    @JsonCreator
    public Envelope(
            @JsonProperty("envelope_id") @Nullable Long envelopeId,
            @JsonProperty("envelope_name") @Nullable String envelopeName,
            @JsonProperty("max_sheets") @Nullable Long maxSheets) {
        this.envelopeId = envelopeId;
        this.envelopeName = envelopeName;
        this.maxSheets = maxSheets;
    }
    
    public Envelope() {
        this(null, null, null);
    }

    /**
     * Unique envelope template identifier.
     */
    public Optional<Long> envelopeId() {
        return Optional.ofNullable(this.envelopeId);
    }

    /**
     * Envelope template name.
     */
    public Optional<String> envelopeName() {
        return Optional.ofNullable(this.envelopeName);
    }

    /**
     * Maximum number of sheets supported by this envelope type.
     */
    public Optional<Long> maxSheets() {
        return Optional.ofNullable(this.maxSheets);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique envelope template identifier.
     */
    public Envelope withEnvelopeId(@Nullable Long envelopeId) {
        this.envelopeId = envelopeId;
        return this;
    }


    /**
     * Envelope template name.
     */
    public Envelope withEnvelopeName(@Nullable String envelopeName) {
        this.envelopeName = envelopeName;
        return this;
    }


    /**
     * Maximum number of sheets supported by this envelope type.
     */
    public Envelope withMaxSheets(@Nullable Long maxSheets) {
        this.maxSheets = maxSheets;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Envelope other = (Envelope) o;
        return 
            Utils.enhancedDeepEquals(this.envelopeId, other.envelopeId) &&
            Utils.enhancedDeepEquals(this.envelopeName, other.envelopeName) &&
            Utils.enhancedDeepEquals(this.maxSheets, other.maxSheets);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            envelopeId, envelopeName, maxSheets);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Envelope.class,
                "envelopeId", envelopeId,
                "envelopeName", envelopeName,
                "maxSheets", maxSheets);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long envelopeId;

        private String envelopeName;

        private Long maxSheets;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique envelope template identifier.
         */
        public Builder envelopeId(@Nullable Long envelopeId) {
            this.envelopeId = envelopeId;
            return this;
        }

        /**
         * Envelope template name.
         */
        public Builder envelopeName(@Nullable String envelopeName) {
            this.envelopeName = envelopeName;
            return this;
        }

        /**
         * Maximum number of sheets supported by this envelope type.
         */
        public Builder maxSheets(@Nullable Long maxSheets) {
            this.maxSheets = maxSheets;
            return this;
        }

        public Envelope build() {
            return new Envelope(
                envelopeId, envelopeName, maxSheets);
        }

    }
}
