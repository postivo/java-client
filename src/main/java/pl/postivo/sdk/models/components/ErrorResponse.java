/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.Utils;

/**
 * ErrorResponse
 * 
 * <p>Problem Details object (RFC 9457) describing the error.
 */
public class ErrorResponse {
    /**
     * URI that identifies the problem type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private String type;

    /**
     * HTTP status code generated by the origin server for this occurrence of the problem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Long status;

    /**
     * Short, human-readable summary of the problem type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private String title;

    /**
     * Human-readable explanation specific to this occurrence of the problem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detail")
    private String detail;

    /**
     * API-specific error code to help the provider team classify the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private String code;

    /**
     * URI that identifies this specific occurrence of the problem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance")
    private String instance;

    @JsonCreator
    public ErrorResponse(
            @JsonProperty("type") @Nullable String type,
            @JsonProperty("status") @Nullable Long status,
            @JsonProperty("title") @Nullable String title,
            @JsonProperty("detail") @Nullable String detail,
            @JsonProperty("code") @Nullable String code,
            @JsonProperty("instance") @Nullable String instance) {
        this.type = type;
        this.status = status;
        this.title = title;
        this.detail = detail;
        this.code = code;
        this.instance = instance;
    }
    
    public ErrorResponse() {
        this(null, null, null,
            null, null, null);
    }

    /**
     * URI that identifies the problem type.
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * HTTP status code generated by the origin server for this occurrence of the problem.
     */
    public Optional<Long> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Short, human-readable summary of the problem type.
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * Human-readable explanation specific to this occurrence of the problem.
     */
    public Optional<String> detail() {
        return Optional.ofNullable(this.detail);
    }

    /**
     * API-specific error code to help the provider team classify the error.
     */
    public Optional<String> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * URI that identifies this specific occurrence of the problem.
     */
    public Optional<String> instance() {
        return Optional.ofNullable(this.instance);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * URI that identifies the problem type.
     */
    public ErrorResponse withType(@Nullable String type) {
        this.type = type;
        return this;
    }


    /**
     * HTTP status code generated by the origin server for this occurrence of the problem.
     */
    public ErrorResponse withStatus(@Nullable Long status) {
        this.status = status;
        return this;
    }


    /**
     * Short, human-readable summary of the problem type.
     */
    public ErrorResponse withTitle(@Nullable String title) {
        this.title = title;
        return this;
    }


    /**
     * Human-readable explanation specific to this occurrence of the problem.
     */
    public ErrorResponse withDetail(@Nullable String detail) {
        this.detail = detail;
        return this;
    }


    /**
     * API-specific error code to help the provider team classify the error.
     */
    public ErrorResponse withCode(@Nullable String code) {
        this.code = code;
        return this;
    }


    /**
     * URI that identifies this specific occurrence of the problem.
     */
    public ErrorResponse withInstance(@Nullable String instance) {
        this.instance = instance;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ErrorResponse other = (ErrorResponse) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.detail, other.detail) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.instance, other.instance);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, status, title,
            detail, code, instance);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ErrorResponse.class,
                "type", type,
                "status", status,
                "title", title,
                "detail", detail,
                "code", code,
                "instance", instance);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String type;

        private Long status;

        private String title;

        private String detail;

        private String code;

        private String instance;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * URI that identifies the problem type.
         */
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }

        /**
         * HTTP status code generated by the origin server for this occurrence of the problem.
         */
        public Builder status(@Nullable Long status) {
            this.status = status;
            return this;
        }

        /**
         * Short, human-readable summary of the problem type.
         */
        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }

        /**
         * Human-readable explanation specific to this occurrence of the problem.
         */
        public Builder detail(@Nullable String detail) {
            this.detail = detail;
            return this;
        }

        /**
         * API-specific error code to help the provider team classify the error.
         */
        public Builder code(@Nullable String code) {
            this.code = code;
            return this;
        }

        /**
         * URI that identifies this specific occurrence of the problem.
         */
        public Builder instance(@Nullable String instance) {
            this.instance = instance;
            return this;
        }

        public ErrorResponse build() {
            return new ErrorResponse(
                type, status, title,
                detail, code, instance);
        }

    }
}
