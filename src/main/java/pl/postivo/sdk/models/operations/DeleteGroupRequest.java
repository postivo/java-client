/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.LazySingletonValue;
import pl.postivo.sdk.utils.SpeakeasyMetadata;
import pl.postivo.sdk.utils.Utils;


public class DeleteGroupRequest {
    /**
     * Group `id` to remove.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private long id;

    /**
     * How to handle contacts that belong to the group.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contacts")
    private ContactHandling contacts;

    @JsonCreator
    public DeleteGroupRequest(
            long id,
            @Nullable ContactHandling contacts) {
        this.id = id;
        this.contacts = Optional.ofNullable(contacts)
            .orElse(Builder._SINGLETON_VALUE_Contacts.value());
    }
    
    public DeleteGroupRequest(
            long id) {
        this(id, null);
    }

    /**
     * Group `id` to remove.
     */
    public long id() {
        return this.id;
    }

    /**
     * How to handle contacts that belong to the group.
     */
    public Optional<ContactHandling> contacts() {
        return Optional.ofNullable(this.contacts);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Group `id` to remove.
     */
    public DeleteGroupRequest withId(long id) {
        this.id = id;
        return this;
    }


    /**
     * How to handle contacts that belong to the group.
     */
    public DeleteGroupRequest withContacts(@Nullable ContactHandling contacts) {
        this.contacts = contacts;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteGroupRequest other = (DeleteGroupRequest) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.contacts, other.contacts);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, contacts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteGroupRequest.class,
                "id", id,
                "contacts", contacts);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private long id;

        private ContactHandling contacts;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Group `id` to remove.
         */
        public Builder id(long id) {
            this.id = id;
            return this;
        }

        /**
         * How to handle contacts that belong to the group.
         */
        public Builder contacts(@Nullable ContactHandling contacts) {
            this.contacts = contacts;
            return this;
        }

        public DeleteGroupRequest build() {
            return new DeleteGroupRequest(
                id, contacts);
        }


        private static final LazySingletonValue<ContactHandling> _SINGLETON_VALUE_Contacts =
                new LazySingletonValue<>(
                        "contacts",
                        "\"detach\"",
                        new TypeReference<ContactHandling>() {});
    }
}
