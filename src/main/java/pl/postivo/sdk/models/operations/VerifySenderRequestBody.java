/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.Utils;

/**
 * VerifySenderRequestBody
 * 
 * <p>Verification code received in the letter.
 */
public class VerifySenderRequestBody {

    @JsonProperty("verification_code")
    private String verificationCode;

    @JsonCreator
    public VerifySenderRequestBody(
            @JsonProperty("verification_code") @Nonnull String verificationCode) {
        this.verificationCode = Optional.ofNullable(verificationCode)
            .orElseThrow(() -> new IllegalArgumentException("verificationCode cannot be null"));
    }

    public String verificationCode() {
        return this.verificationCode;
    }

    public static Builder builder() {
        return new Builder();
    }


    public VerifySenderRequestBody withVerificationCode(@Nonnull String verificationCode) {
        this.verificationCode = Utils.checkNotNull(verificationCode, "verificationCode");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerifySenderRequestBody other = (VerifySenderRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.verificationCode, other.verificationCode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            verificationCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerifySenderRequestBody.class,
                "verificationCode", verificationCode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String verificationCode;

        private Builder() {
          // force use of static builder() method
        }

        public Builder verificationCode(@Nonnull String verificationCode) {
            this.verificationCode = Utils.checkNotNull(verificationCode, "verificationCode");
            return this;
        }

        public VerifySenderRequestBody build() {
            return new VerifySenderRequestBody(
                verificationCode);
        }

    }
}
