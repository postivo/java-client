/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.SpeakeasyMetadata;
import pl.postivo.sdk.utils.Utils;


public class GetSubaccountDetailsRequest {
    /**
     * Login of the subaccount (user) for which to retrieve data.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=true,name=user_login")
    private String userLogin;

    @JsonCreator
    public GetSubaccountDetailsRequest(
            @Nonnull String userLogin) {
        this.userLogin = Optional.ofNullable(userLogin)
            .orElseThrow(() -> new IllegalArgumentException("userLogin cannot be null"));
    }

    /**
     * Login of the subaccount (user) for which to retrieve data.
     */
    public String userLogin() {
        return this.userLogin;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Login of the subaccount (user) for which to retrieve data.
     */
    public GetSubaccountDetailsRequest withUserLogin(@Nonnull String userLogin) {
        this.userLogin = Utils.checkNotNull(userLogin, "userLogin");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSubaccountDetailsRequest other = (GetSubaccountDetailsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.userLogin, other.userLogin);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            userLogin);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSubaccountDetailsRequest.class,
                "userLogin", userLogin);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String userLogin;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Login of the subaccount (user) for which to retrieve data.
         */
        public Builder userLogin(@Nonnull String userLogin) {
            this.userLogin = Utils.checkNotNull(userLogin, "userLogin");
            return this;
        }

        public GetSubaccountDetailsRequest build() {
            return new GetSubaccountDetailsRequest(
                userLogin);
        }

    }
}
