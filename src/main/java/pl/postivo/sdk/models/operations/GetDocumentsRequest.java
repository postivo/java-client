/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.SpeakeasyMetadata;
import pl.postivo.sdk.utils.Utils;


public class GetDocumentsRequest {
    /**
     * Single shipment ID assigned by the system when the shipment was created.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    /**
     * Type of document/certificate to generate.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=type")
    private DocumentType type;

    @JsonCreator
    public GetDocumentsRequest(
            @Nonnull String id,
            @Nonnull DocumentType type) {
        this.id = Optional.ofNullable(id)
            .orElseThrow(() -> new IllegalArgumentException("id cannot be null"));
        this.type = Optional.ofNullable(type)
            .orElseThrow(() -> new IllegalArgumentException("type cannot be null"));
    }

    /**
     * Single shipment ID assigned by the system when the shipment was created.
     */
    public String id() {
        return this.id;
    }

    /**
     * Type of document/certificate to generate.
     */
    public DocumentType type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Single shipment ID assigned by the system when the shipment was created.
     */
    public GetDocumentsRequest withId(@Nonnull String id) {
        this.id = Utils.checkNotNull(id, "id");
        return this;
    }


    /**
     * Type of document/certificate to generate.
     */
    public GetDocumentsRequest withType(@Nonnull DocumentType type) {
        this.type = Utils.checkNotNull(type, "type");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDocumentsRequest other = (GetDocumentsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDocumentsRequest.class,
                "id", id,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private DocumentType type;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Single shipment ID assigned by the system when the shipment was created.
         */
        public Builder id(@Nonnull String id) {
            this.id = Utils.checkNotNull(id, "id");
            return this;
        }

        /**
         * Type of document/certificate to generate.
         */
        public Builder type(@Nonnull DocumentType type) {
            this.type = Utils.checkNotNull(type, "type");
            return this;
        }

        public GetDocumentsRequest build() {
            return new GetDocumentsRequest(
                id, type);
        }

    }
}
