/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.models.components.Contact;
import pl.postivo.sdk.utils.SpeakeasyMetadata;
import pl.postivo.sdk.utils.Utils;


public class UpdateContactRequest {
    /**
     * ID of the contact to update.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private long id;

    /**
     * A `Contact` object with the updated fields.
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private Contact contact;

    @JsonCreator
    public UpdateContactRequest(
            long id,
            @Nonnull Contact contact) {
        this.id = id;
        this.contact = Optional.ofNullable(contact)
            .orElseThrow(() -> new IllegalArgumentException("contact cannot be null"));
    }

    /**
     * ID of the contact to update.
     */
    public long id() {
        return this.id;
    }

    /**
     * A `Contact` object with the updated fields.
     */
    public Contact contact() {
        return this.contact;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * ID of the contact to update.
     */
    public UpdateContactRequest withId(long id) {
        this.id = id;
        return this;
    }


    /**
     * A `Contact` object with the updated fields.
     */
    public UpdateContactRequest withContact(@Nonnull Contact contact) {
        this.contact = Utils.checkNotNull(contact, "contact");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateContactRequest other = (UpdateContactRequest) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.contact, other.contact);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, contact);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateContactRequest.class,
                "id", id,
                "contact", contact);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private long id;

        private Contact contact;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the contact to update.
         */
        public Builder id(long id) {
            this.id = id;
            return this;
        }

        /**
         * A `Contact` object with the updated fields.
         */
        public Builder contact(@Nonnull Contact contact) {
            this.contact = Utils.checkNotNull(contact, "contact");
            return this;
        }

        public UpdateContactRequest build() {
            return new UpdateContactRequest(
                id, contact);
        }

    }
}
