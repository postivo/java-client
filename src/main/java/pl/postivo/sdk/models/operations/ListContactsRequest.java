/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.LazySingletonValue;
import pl.postivo.sdk.utils.SpeakeasyMetadata;
import pl.postivo.sdk.utils.Utils;


public class ListContactsRequest {
    /**
     * Page number of results
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Long page;

    /**
     * Results limit per page.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Long limit;

    @JsonCreator
    public ListContactsRequest(
            @Nullable Long page,
            @Nullable Long limit) {
        this.page = Optional.ofNullable(page)
            .orElse(Builder._SINGLETON_VALUE_Page.value());
        this.limit = Optional.ofNullable(limit)
            .orElse(Builder._SINGLETON_VALUE_Limit.value());
    }
    
    public ListContactsRequest() {
        this(null, null);
    }

    /**
     * Page number of results
     */
    public Optional<Long> page() {
        return Optional.ofNullable(this.page);
    }

    /**
     * Results limit per page.
     */
    public Optional<Long> limit() {
        return Optional.ofNullable(this.limit);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Page number of results
     */
    public ListContactsRequest withPage(@Nullable Long page) {
        this.page = page;
        return this;
    }


    /**
     * Results limit per page.
     */
    public ListContactsRequest withLimit(@Nullable Long limit) {
        this.limit = limit;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListContactsRequest other = (ListContactsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.limit, other.limit);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            page, limit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListContactsRequest.class,
                "page", page,
                "limit", limit);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long page;

        private Long limit;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Page number of results
         */
        public Builder page(@Nullable Long page) {
            this.page = page;
            return this;
        }

        /**
         * Results limit per page.
         */
        public Builder limit(@Nullable Long limit) {
            this.limit = limit;
            return this;
        }

        public ListContactsRequest build() {
            return new ListContactsRequest(
                page, limit);
        }


        private static final LazySingletonValue<Long> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Long>() {});

        private static final LazySingletonValue<Long> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "10",
                        new TypeReference<Long>() {});
    }
}
