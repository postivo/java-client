/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import pl.postivo.sdk.utils.SpeakeasyMetadata;
import pl.postivo.sdk.utils.Utils;


public class AddContactByExtIdToGroupRequest {
    /**
     * External (custom) ID of the contact to add to the group.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=ext_id")
    private String extId;

    /**
     * Group `id` to associate with the contact.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=group_id")
    private long groupId;

    @JsonCreator
    public AddContactByExtIdToGroupRequest(
            @Nonnull String extId,
            long groupId) {
        this.extId = Optional.ofNullable(extId)
            .orElseThrow(() -> new IllegalArgumentException("extId cannot be null"));
        this.groupId = groupId;
    }

    /**
     * External (custom) ID of the contact to add to the group.
     */
    public String extId() {
        return this.extId;
    }

    /**
     * Group `id` to associate with the contact.
     */
    public long groupId() {
        return this.groupId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * External (custom) ID of the contact to add to the group.
     */
    public AddContactByExtIdToGroupRequest withExtId(@Nonnull String extId) {
        this.extId = Utils.checkNotNull(extId, "extId");
        return this;
    }


    /**
     * Group `id` to associate with the contact.
     */
    public AddContactByExtIdToGroupRequest withGroupId(long groupId) {
        this.groupId = groupId;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddContactByExtIdToGroupRequest other = (AddContactByExtIdToGroupRequest) o;
        return 
            Utils.enhancedDeepEquals(this.extId, other.extId) &&
            Utils.enhancedDeepEquals(this.groupId, other.groupId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            extId, groupId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddContactByExtIdToGroupRequest.class,
                "extId", extId,
                "groupId", groupId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String extId;

        private long groupId;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * External (custom) ID of the contact to add to the group.
         */
        public Builder extId(@Nonnull String extId) {
            this.extId = Utils.checkNotNull(extId, "extId");
            return this;
        }

        /**
         * Group `id` to associate with the contact.
         */
        public Builder groupId(long groupId) {
            this.groupId = groupId;
            return this;
        }

        public AddContactByExtIdToGroupRequest build() {
            return new AddContactByExtIdToGroupRequest(
                extId, groupId);
        }

    }
}
