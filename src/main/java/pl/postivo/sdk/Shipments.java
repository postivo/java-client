/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk;

import static pl.postivo.sdk.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import pl.postivo.sdk.models.components.Shipment;
import pl.postivo.sdk.models.operations.CancelShipmentRequest;
import pl.postivo.sdk.models.operations.CancelShipmentRequestBuilder;
import pl.postivo.sdk.models.operations.CancelShipmentResponse;
import pl.postivo.sdk.models.operations.DocumentType;
import pl.postivo.sdk.models.operations.GetDocumentsRequest;
import pl.postivo.sdk.models.operations.GetDocumentsRequestBuilder;
import pl.postivo.sdk.models.operations.GetDocumentsResponse;
import pl.postivo.sdk.models.operations.GetStatusRequest;
import pl.postivo.sdk.models.operations.GetStatusRequestBuilder;
import pl.postivo.sdk.models.operations.GetStatusResponse;
import pl.postivo.sdk.models.operations.ShipmentDispatchRequestBuilder;
import pl.postivo.sdk.models.operations.ShipmentDispatchResponse;
import pl.postivo.sdk.models.operations.ShipmentPriceRequestBuilder;
import pl.postivo.sdk.models.operations.ShipmentPriceResponse;
import pl.postivo.sdk.operations.CancelShipment;
import pl.postivo.sdk.operations.GetDocuments;
import pl.postivo.sdk.operations.GetStatus;
import pl.postivo.sdk.operations.ShipmentDispatch;
import pl.postivo.sdk.operations.ShipmentPrice;
import pl.postivo.sdk.utils.Headers;
import pl.postivo.sdk.utils.Options;


public class Shipments {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncShipments asyncSDK;

    Shipments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncShipments(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncShipments async() {
        return asyncSDK;
    }

    /**
     * Retrieve shipment details with status events
     * 
     * <p>Retrieve the current status and details for one or more shipments by their <code>ids</code>. Pass the unique
     * shipment IDs (returned when the shipments were created) as a path parameter. To query provide a list
     * (up to **50** IDs per call).
     * 
     * <p>For larger batches, split the requests.
     * 
     * @return The call builder
     */
    public GetStatusRequestBuilder status() {
        return new GetStatusRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve shipment details with status events
     * 
     * <p>Retrieve the current status and details for one or more shipments by their <code>ids</code>. Pass the unique
     * shipment IDs (returned when the shipments were created) as a path parameter. To query provide a list
     * (up to **50** IDs per call).
     * 
     * <p>For larger batches, split the requests.
     * 
     * @param ids Shipment IDs assigned by the system (comma-separated). The system accepts a maximum of **50** identifiers per call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetStatusResponse status(@Nonnull List<String> ids) throws Exception {
        return status(ids, null);
    }

    /**
     * Retrieve shipment details with status events
     * 
     * <p>Retrieve the current status and details for one or more shipments by their <code>ids</code>. Pass the unique
     * shipment IDs (returned when the shipments were created) as a path parameter. To query provide a list
     * (up to **50** IDs per call).
     * 
     * <p>For larger batches, split the requests.
     * 
     * @param ids Shipment IDs assigned by the system (comma-separated). The system accepts a maximum of **50** identifiers per call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetStatusResponse status(@Nonnull List<String> ids, @Nullable Options options) throws Exception {
        GetStatusRequest request = new GetStatusRequest(ids);
        RequestOperation<GetStatusRequest, GetStatusResponse> operation
              = new GetStatus.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Cancel shipments
     * 
     * <p>Cancel shipments that have not yet been processed by their <code>ids</code>. Pass the unique shipment IDs
     * (returned when the shipment was created) as a parameter. To cancel multiple shipments at once,
     * provide a list of IDs (up to **50** per call).
     * 
     * <p>For larger volumes, split the operation into multiple requests. Only shipments with status
     * <code>ACCEPTED</code> can be cancelled.
     * 
     * <p>If duplicate shipment IDs are provided in a single call, the API processes each unique ID only once.
     * 
     * @return The call builder
     */
    public CancelShipmentRequestBuilder cancel() {
        return new CancelShipmentRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel shipments
     * 
     * <p>Cancel shipments that have not yet been processed by their <code>ids</code>. Pass the unique shipment IDs
     * (returned when the shipment was created) as a parameter. To cancel multiple shipments at once,
     * provide a list of IDs (up to **50** per call).
     * 
     * <p>For larger volumes, split the operation into multiple requests. Only shipments with status
     * <code>ACCEPTED</code> can be cancelled.
     * 
     * <p>If duplicate shipment IDs are provided in a single call, the API processes each unique ID only once.
     * 
     * @param ids Shipment IDs assigned by the system (comma-separated). The system accepts a maximum of **50** identifiers per call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelShipmentResponse cancel(@Nonnull List<String> ids) throws Exception {
        return cancel(ids, null);
    }

    /**
     * Cancel shipments
     * 
     * <p>Cancel shipments that have not yet been processed by their <code>ids</code>. Pass the unique shipment IDs
     * (returned when the shipment was created) as a parameter. To cancel multiple shipments at once,
     * provide a list of IDs (up to **50** per call).
     * 
     * <p>For larger volumes, split the operation into multiple requests. Only shipments with status
     * <code>ACCEPTED</code> can be cancelled.
     * 
     * <p>If duplicate shipment IDs are provided in a single call, the API processes each unique ID only once.
     * 
     * @param ids Shipment IDs assigned by the system (comma-separated). The system accepts a maximum of **50** identifiers per call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelShipmentResponse cancel(@Nonnull List<String> ids, @Nullable Options options) throws Exception {
        CancelShipmentRequest request = new CancelShipmentRequest(ids);
        RequestOperation<CancelShipmentRequest, CancelShipmentResponse> operation
              = new CancelShipment.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Dispatch a new shipment
     * 
     * <p>Send a shipment to one or multiple recipients in a single request. Provide a <code>Shipment</code> object. The
     * object includes properties that define the shipment (recipient details, included documents, and
     * optional settings).
     * 
     * <p>Some fields are required.
     * 
     * <p>The system accepts up to **50** recipients per call. For larger volumes, split the operation into
     * multiple requests.
     * 
     * @return The call builder
     */
    public ShipmentDispatchRequestBuilder dispatch() {
        return new ShipmentDispatchRequestBuilder(sdkConfiguration);
    }

    /**
     * Dispatch a new shipment
     * 
     * <p>Send a shipment to one or multiple recipients in a single request. Provide a <code>Shipment</code> object. The
     * object includes properties that define the shipment (recipient details, included documents, and
     * optional settings).
     * 
     * <p>Some fields are required.
     * 
     * <p>The system accepts up to **50** recipients per call. For larger volumes, split the operation into
     * multiple requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ShipmentDispatchResponse dispatch(@Nonnull Shipment request) throws Exception {
        return dispatch(request, null);
    }

    /**
     * Dispatch a new shipment
     * 
     * <p>Send a shipment to one or multiple recipients in a single request. Provide a <code>Shipment</code> object. The
     * object includes properties that define the shipment (recipient details, included documents, and
     * optional settings).
     * 
     * <p>Some fields are required.
     * 
     * <p>The system accepts up to **50** recipients per call. For larger volumes, split the operation into
     * multiple requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ShipmentDispatchResponse dispatch(@Nonnull Shipment request, @Nullable Options options) throws Exception {
        RequestOperation<Shipment, ShipmentDispatchResponse> operation
              = new ShipmentDispatch.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve documents related to a shipment
     * 
     * <p>Download documents related to a shipment by its <code>id</code>. Pass the unique shipment <code>id</code> (returned when
     * the shipment was created) as a parameter. The second parameter is the document type to download.
     * 
     * <p>Supported document types include: dispatch certificate, envelope template, and EPO (in PDF or XML
     * formats).
     * 
     * @return The call builder
     */
    public GetDocumentsRequestBuilder documents() {
        return new GetDocumentsRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve documents related to a shipment
     * 
     * <p>Download documents related to a shipment by its <code>id</code>. Pass the unique shipment <code>id</code> (returned when
     * the shipment was created) as a parameter. The second parameter is the document type to download.
     * 
     * <p>Supported document types include: dispatch certificate, envelope template, and EPO (in PDF or XML
     * formats).
     * 
     * @param id Single shipment ID assigned by the system when the shipment was created.
     * @param type Type of document/certificate to generate.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetDocumentsResponse documents(@Nonnull String id, @Nonnull DocumentType type) throws Exception {
        return documents(id, type, null);
    }

    /**
     * Retrieve documents related to a shipment
     * 
     * <p>Download documents related to a shipment by its <code>id</code>. Pass the unique shipment <code>id</code> (returned when
     * the shipment was created) as a parameter. The second parameter is the document type to download.
     * 
     * <p>Supported document types include: dispatch certificate, envelope template, and EPO (in PDF or XML
     * formats).
     * 
     * @param id Single shipment ID assigned by the system when the shipment was created.
     * @param type Type of document/certificate to generate.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetDocumentsResponse documents(
            @Nonnull String id, @Nonnull DocumentType type,
            @Nullable Options options) throws Exception {
        GetDocumentsRequest request = new GetDocumentsRequest(id, type);
        RequestOperation<GetDocumentsRequest, GetDocumentsResponse> operation
              = new GetDocuments.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Check the shipment price
     * 
     * <p>Check the price of a shipment for one or multiple recipients. Provide a <code>Shipment</code> object in the
     * request. Each object includes properties such as recipient details, included documents, and optional
     * settings.
     * 
     * <p>Some fields are required.
     * 
     * <p>The system accepts up to **50** recipients per call. For larger volumes, split the operation into
     * multiple requests.
     * 
     * @return The call builder
     */
    public ShipmentPriceRequestBuilder price() {
        return new ShipmentPriceRequestBuilder(sdkConfiguration);
    }

    /**
     * Check the shipment price
     * 
     * <p>Check the price of a shipment for one or multiple recipients. Provide a <code>Shipment</code> object in the
     * request. Each object includes properties such as recipient details, included documents, and optional
     * settings.
     * 
     * <p>Some fields are required.
     * 
     * <p>The system accepts up to **50** recipients per call. For larger volumes, split the operation into
     * multiple requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ShipmentPriceResponse price(@Nonnull Shipment request) throws Exception {
        return price(request, null);
    }

    /**
     * Check the shipment price
     * 
     * <p>Check the price of a shipment for one or multiple recipients. Provide a <code>Shipment</code> object in the
     * request. Each object includes properties such as recipient details, included documents, and optional
     * settings.
     * 
     * <p>Some fields are required.
     * 
     * <p>The system accepts up to **50** recipients per call. For larger volumes, split the operation into
     * multiple requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ShipmentPriceResponse price(@Nonnull Shipment request, @Nullable Options options) throws Exception {
        RequestOperation<Shipment, ShipmentPriceResponse> operation
              = new ShipmentPrice.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
