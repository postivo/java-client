/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk;

import static pl.postivo.sdk.operations.Operations.AsyncRequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import pl.postivo.sdk.models.components.Contact;
import pl.postivo.sdk.models.operations.AddContactByExtIdToGroupRequest;
import pl.postivo.sdk.models.operations.DeleteContactByExternalIdRequest;
import pl.postivo.sdk.models.operations.GetContactByExternalIdRequest;
import pl.postivo.sdk.models.operations.RemoveContactByExtIdToGroupRequest;
import pl.postivo.sdk.models.operations.UpdateContactByExternalIdRequest;
import pl.postivo.sdk.models.operations.async.AddContactByExtIdToGroupRequestBuilder;
import pl.postivo.sdk.models.operations.async.AddContactByExtIdToGroupResponse;
import pl.postivo.sdk.models.operations.async.DeleteContactByExternalIdRequestBuilder;
import pl.postivo.sdk.models.operations.async.DeleteContactByExternalIdResponse;
import pl.postivo.sdk.models.operations.async.GetContactByExternalIdRequestBuilder;
import pl.postivo.sdk.models.operations.async.GetContactByExternalIdResponse;
import pl.postivo.sdk.models.operations.async.RemoveContactByExtIdToGroupRequestBuilder;
import pl.postivo.sdk.models.operations.async.RemoveContactByExtIdToGroupResponse;
import pl.postivo.sdk.models.operations.async.UpdateContactByExternalIdRequestBuilder;
import pl.postivo.sdk.models.operations.async.UpdateContactByExternalIdResponse;
import pl.postivo.sdk.operations.AddContactByExtIdToGroup;
import pl.postivo.sdk.operations.DeleteContactByExternalId;
import pl.postivo.sdk.operations.GetContactByExternalId;
import pl.postivo.sdk.operations.RemoveContactByExtIdToGroup;
import pl.postivo.sdk.operations.UpdateContactByExternalId;
import pl.postivo.sdk.utils.Headers;
import pl.postivo.sdk.utils.Options;


public class AsyncByExtId {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final ByExtId syncSDK;

    AsyncByExtId(ByExtId syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ByExtId sync() {
        return syncSDK;
    }


    /**
     * Retrieve contact details by EXT_ID
     * 
     * <p>Get the details of a contact from your Address Book using your external (custom) ID (the value you
     * defined when creating the contact).
     * 
     * @return The async call builder
     */
    public GetContactByExternalIdRequestBuilder get() {
        return new GetContactByExternalIdRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve contact details by EXT_ID
     * 
     * <p>Get the details of a contact from your Address Book using your external (custom) ID (the value you
     * defined when creating the contact).
     * 
     * @param extId External (custom) ID of the contact to fetch.
     * @return {@code CompletableFuture<GetContactByExternalIdResponse>} - The async response
     */
    public CompletableFuture<GetContactByExternalIdResponse> get(@Nonnull String extId) {
        return get(extId, null);
    }

    /**
     * Retrieve contact details by EXT_ID
     * 
     * <p>Get the details of a contact from your Address Book using your external (custom) ID (the value you
     * defined when creating the contact).
     * 
     * @param extId External (custom) ID of the contact to fetch.
     * @param options additional options
     * @return {@code CompletableFuture<GetContactByExternalIdResponse>} - The async response
     */
    public CompletableFuture<GetContactByExternalIdResponse> get(@Nonnull String extId, @Nullable Options options) {
        GetContactByExternalIdRequest request = new GetContactByExternalIdRequest(extId);
        AsyncRequestOperation<GetContactByExternalIdRequest, GetContactByExternalIdResponse> operation
              = new GetContactByExternalId.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a contact by EXT_ID
     * 
     * <p>Update a contact by its external (custom) ID - the value you defined when creating the contact.
     * 
     * @return The async call builder
     */
    public UpdateContactByExternalIdRequestBuilder update() {
        return new UpdateContactByExternalIdRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact by EXT_ID
     * 
     * <p>Update a contact by its external (custom) ID - the value you defined when creating the contact.
     * 
     * @param extId External (custom) ID of the contact to update.
     * @param contact Contact data for an Address Book entry.
     * @return {@code CompletableFuture<UpdateContactByExternalIdResponse>} - The async response
     */
    public CompletableFuture<UpdateContactByExternalIdResponse> update(@Nonnull String extId, @Nonnull Contact contact) {
        return update(extId, contact, null);
    }

    /**
     * Update a contact by EXT_ID
     * 
     * <p>Update a contact by its external (custom) ID - the value you defined when creating the contact.
     * 
     * @param extId External (custom) ID of the contact to update.
     * @param contact Contact data for an Address Book entry.
     * @param options additional options
     * @return {@code CompletableFuture<UpdateContactByExternalIdResponse>} - The async response
     */
    public CompletableFuture<UpdateContactByExternalIdResponse> update(
            @Nonnull String extId, @Nonnull Contact contact,
            @Nullable Options options) {
        UpdateContactByExternalIdRequest request = new UpdateContactByExternalIdRequest(extId, contact);
        AsyncRequestOperation<UpdateContactByExternalIdRequest, UpdateContactByExternalIdResponse> operation
              = new UpdateContactByExternalId.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete a contact by EXT_ID
     * 
     * <p>Remove a contact from your account by its external (custom) ID - the value defined when the contact
     * was created.
     * 
     * @return The async call builder
     */
    public DeleteContactByExternalIdRequestBuilder delete() {
        return new DeleteContactByExternalIdRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a contact by EXT_ID
     * 
     * <p>Remove a contact from your account by its external (custom) ID - the value defined when the contact
     * was created.
     * 
     * @param extId External (custom) ID of the contact to remove.
     * @return {@code CompletableFuture<DeleteContactByExternalIdResponse>} - The async response
     */
    public CompletableFuture<DeleteContactByExternalIdResponse> delete(@Nonnull String extId) {
        return delete(extId, null);
    }

    /**
     * Delete a contact by EXT_ID
     * 
     * <p>Remove a contact from your account by its external (custom) ID - the value defined when the contact
     * was created.
     * 
     * @param extId External (custom) ID of the contact to remove.
     * @param options additional options
     * @return {@code CompletableFuture<DeleteContactByExternalIdResponse>} - The async response
     */
    public CompletableFuture<DeleteContactByExternalIdResponse> delete(@Nonnull String extId, @Nullable Options options) {
        DeleteContactByExternalIdRequest request = new DeleteContactByExternalIdRequest(extId);
        AsyncRequestOperation<DeleteContactByExternalIdRequest, DeleteContactByExternalIdResponse> operation
              = new DeleteContactByExternalId.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a contact from a group by EXT_ID
     * 
     * <p>Remove a contact from a group in your Address Book using the contact’s external (custom) ID. This
     * operation does not delete the contact; it only detaches the contact from the group. Provide the
     * contact’s `ext_id` and the group’s `group_id` parameters to perform the detachment.
     * 
     * @return The async call builder
     */
    public RemoveContactByExtIdToGroupRequestBuilder removeFromGroup() {
        return new RemoveContactByExtIdToGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a contact from a group by EXT_ID
     * 
     * <p>Remove a contact from a group in your Address Book using the contact’s external (custom) ID. This
     * operation does not delete the contact; it only detaches the contact from the group. Provide the
     * contact’s `ext_id` and the group’s `group_id` parameters to perform the detachment.
     * 
     * @param extId External (custom) ID of the contact to detach from the group.
     * @param groupId Group `id` to detach from the contact.
     * @return {@code CompletableFuture<RemoveContactByExtIdToGroupResponse>} - The async response
     */
    public CompletableFuture<RemoveContactByExtIdToGroupResponse> removeFromGroup(@Nonnull String extId, long groupId) {
        return removeFromGroup(extId, groupId, null);
    }

    /**
     * Remove a contact from a group by EXT_ID
     * 
     * <p>Remove a contact from a group in your Address Book using the contact’s external (custom) ID. This
     * operation does not delete the contact; it only detaches the contact from the group. Provide the
     * contact’s `ext_id` and the group’s `group_id` parameters to perform the detachment.
     * 
     * @param extId External (custom) ID of the contact to detach from the group.
     * @param groupId Group `id` to detach from the contact.
     * @param options additional options
     * @return {@code CompletableFuture<RemoveContactByExtIdToGroupResponse>} - The async response
     */
    public CompletableFuture<RemoveContactByExtIdToGroupResponse> removeFromGroup(
            @Nonnull String extId, long groupId,
            @Nullable Options options) {
        RemoveContactByExtIdToGroupRequest request = new RemoveContactByExtIdToGroupRequest(extId, groupId);
        AsyncRequestOperation<RemoveContactByExtIdToGroupRequest, RemoveContactByExtIdToGroupResponse> operation
              = new RemoveContactByExtIdToGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Add a contact to a group by EXT_ID
     * 
     * <p>Assign a contact to a group using the contact’s external (custom) ID (assigned when creating the
     * contact). If a contact and a group exist in your account, you can add the contact to that group.
     * 
     * <p>Provide the contact’s `ext_id` and the group’s `group_id` parameters to perform the assignment.
     * 
     * @return The async call builder
     */
    public AddContactByExtIdToGroupRequestBuilder addToGroup() {
        return new AddContactByExtIdToGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a contact to a group by EXT_ID
     * 
     * <p>Assign a contact to a group using the contact’s external (custom) ID (assigned when creating the
     * contact). If a contact and a group exist in your account, you can add the contact to that group.
     * 
     * <p>Provide the contact’s `ext_id` and the group’s `group_id` parameters to perform the assignment.
     * 
     * @param extId External (custom) ID of the contact to add to the group.
     * @param groupId Group `id` to associate with the contact.
     * @return {@code CompletableFuture<AddContactByExtIdToGroupResponse>} - The async response
     */
    public CompletableFuture<AddContactByExtIdToGroupResponse> addToGroup(@Nonnull String extId, long groupId) {
        return addToGroup(extId, groupId, null);
    }

    /**
     * Add a contact to a group by EXT_ID
     * 
     * <p>Assign a contact to a group using the contact’s external (custom) ID (assigned when creating the
     * contact). If a contact and a group exist in your account, you can add the contact to that group.
     * 
     * <p>Provide the contact’s `ext_id` and the group’s `group_id` parameters to perform the assignment.
     * 
     * @param extId External (custom) ID of the contact to add to the group.
     * @param groupId Group `id` to associate with the contact.
     * @param options additional options
     * @return {@code CompletableFuture<AddContactByExtIdToGroupResponse>} - The async response
     */
    public CompletableFuture<AddContactByExtIdToGroupResponse> addToGroup(
            @Nonnull String extId, long groupId,
            @Nullable Options options) {
        AddContactByExtIdToGroupRequest request = new AddContactByExtIdToGroupRequest(extId, groupId);
        AsyncRequestOperation<AddContactByExtIdToGroupRequest, AddContactByExtIdToGroupResponse> operation
              = new AddContactByExtIdToGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
