/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk;

import static pl.postivo.sdk.operations.Operations.RequestlessOperation;
import static pl.postivo.sdk.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import pl.postivo.sdk.models.components.Sender;
import pl.postivo.sdk.models.operations.AddSenderRequestBuilder;
import pl.postivo.sdk.models.operations.AddSenderResponse;
import pl.postivo.sdk.models.operations.DeleteSenderRequest;
import pl.postivo.sdk.models.operations.DeleteSenderRequestBuilder;
import pl.postivo.sdk.models.operations.DeleteSenderResponse;
import pl.postivo.sdk.models.operations.ListSendersRequestBuilder;
import pl.postivo.sdk.models.operations.ListSendersResponse;
import pl.postivo.sdk.models.operations.VerifySenderRequest;
import pl.postivo.sdk.models.operations.VerifySenderRequestBody;
import pl.postivo.sdk.models.operations.VerifySenderRequestBuilder;
import pl.postivo.sdk.models.operations.VerifySenderResponse;
import pl.postivo.sdk.operations.AddSender;
import pl.postivo.sdk.operations.DeleteSender;
import pl.postivo.sdk.operations.ListSenders;
import pl.postivo.sdk.operations.VerifySender;
import pl.postivo.sdk.utils.Headers;
import pl.postivo.sdk.utils.Options;


public class Senders {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncSenders asyncSDK;

    Senders(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncSenders(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncSenders async() {
        return asyncSDK;
    }

    /**
     * List senders
     * 
     * <p>Retrieve the list of allowed senders defined in your account. Senders are registered in your account
     * and must be verified and activated before use. Activated senders have <code>active: true</code> property and
     * can be used to send shipments.
     * 
     * <p>Inactive senders are also returned (<code>active: false</code>), but cannot be used until activated.
     * 
     * @return The call builder
     */
    public ListSendersRequestBuilder list() {
        return new ListSendersRequestBuilder(sdkConfiguration);
    }

    /**
     * List senders
     * 
     * <p>Retrieve the list of allowed senders defined in your account. Senders are registered in your account
     * and must be verified and activated before use. Activated senders have <code>active: true</code> property and
     * can be used to send shipments.
     * 
     * <p>Inactive senders are also returned (<code>active: false</code>), but cannot be used until activated.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSendersResponse listDirect() throws Exception {
        return list(null);
    }

    /**
     * List senders
     * 
     * <p>Retrieve the list of allowed senders defined in your account. Senders are registered in your account
     * and must be verified and activated before use. Activated senders have <code>active: true</code> property and
     * can be used to send shipments.
     * 
     * <p>Inactive senders are also returned (<code>active: false</code>), but cannot be used until activated.
     * 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSendersResponse list(@Nullable Options options) throws Exception {
        RequestlessOperation<ListSendersResponse> operation
            = new ListSenders.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Add a new sender
     * 
     * <p>Create a new sender on your account. The request must contain a <code>Sender</code> object. To prevent fraud,
     * all additional senders are verified by mailing a verification code to the sender’s address.
     * 
     * <p>Complete the verification using the <code>verifySender</code> method. Verified senders have <code>active: true</code> and
     * can be used to send shipments. Inactive senders are also returned (<code>active: false</code>), but cannot be
     * used until verification is completed.
     * 
     * @return The call builder
     */
    public AddSenderRequestBuilder add() {
        return new AddSenderRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a new sender
     * 
     * <p>Create a new sender on your account. The request must contain a <code>Sender</code> object. To prevent fraud,
     * all additional senders are verified by mailing a verification code to the sender’s address.
     * 
     * <p>Complete the verification using the <code>verifySender</code> method. Verified senders have <code>active: true</code> and
     * can be used to send shipments. Inactive senders are also returned (<code>active: false</code>), but cannot be
     * used until verification is completed.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddSenderResponse add(@Nonnull Sender request) throws Exception {
        return add(request, null);
    }

    /**
     * Add a new sender
     * 
     * <p>Create a new sender on your account. The request must contain a <code>Sender</code> object. To prevent fraud,
     * all additional senders are verified by mailing a verification code to the sender’s address.
     * 
     * <p>Complete the verification using the <code>verifySender</code> method. Verified senders have <code>active: true</code> and
     * can be used to send shipments. Inactive senders are also returned (<code>active: false</code>), but cannot be
     * used until verification is completed.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddSenderResponse add(@Nonnull Sender request, @Nullable Options options) throws Exception {
        RequestOperation<Sender, AddSenderResponse> operation
              = new AddSender.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a sender
     * 
     * <p>Remove a sender from your account by <code>id</code>. Pass the sender’s <code>id</code> parameter to remove it. The sender
     * is deleted immediately.
     * 
     * @return The call builder
     */
    public DeleteSenderRequestBuilder delete() {
        return new DeleteSenderRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a sender
     * 
     * <p>Remove a sender from your account by <code>id</code>. Pass the sender’s <code>id</code> parameter to remove it. The sender
     * is deleted immediately.
     * 
     * @param id Sender <code>id</code> to remove.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteSenderResponse delete(long id) throws Exception {
        return delete(id, null);
    }

    /**
     * Delete a sender
     * 
     * <p>Remove a sender from your account by <code>id</code>. Pass the sender’s <code>id</code> parameter to remove it. The sender
     * is deleted immediately.
     * 
     * @param id Sender <code>id</code> to remove.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteSenderResponse delete(long id, @Nullable Options options) throws Exception {
        DeleteSenderRequest request = new DeleteSenderRequest(id);
        RequestOperation<DeleteSenderRequest, DeleteSenderResponse> operation
              = new DeleteSender.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Verify sender
     * 
     * <p>Verify a sender to activate it. After adding a new sender, a letter containing a verification code
     * is mailed to the sender’s address. Provide this code to complete verification.
     * 
     * @return The call builder
     */
    public VerifySenderRequestBuilder verify() {
        return new VerifySenderRequestBuilder(sdkConfiguration);
    }

    /**
     * Verify sender
     * 
     * <p>Verify a sender to activate it. After adding a new sender, a letter containing a verification code
     * is mailed to the sender’s address. Provide this code to complete verification.
     * 
     * @param id ID of the sender to verify.
     * @param requestBody Verification code received in the letter.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VerifySenderResponse verify(long id, @Nonnull VerifySenderRequestBody requestBody) throws Exception {
        return verify(id, requestBody, null);
    }

    /**
     * Verify sender
     * 
     * <p>Verify a sender to activate it. After adding a new sender, a letter containing a verification code
     * is mailed to the sender’s address. Provide this code to complete verification.
     * 
     * @param id ID of the sender to verify.
     * @param requestBody Verification code received in the letter.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VerifySenderResponse verify(
            long id, @Nonnull VerifySenderRequestBody requestBody,
            @Nullable Options options) throws Exception {
        VerifySenderRequest request = new VerifySenderRequest(id, requestBody);
        RequestOperation<VerifySenderRequest, VerifySenderResponse> operation
              = new VerifySender.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
