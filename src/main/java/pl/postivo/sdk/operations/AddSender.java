/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.postivo.sdk.operations;

import static pl.postivo.sdk.operations.Operations.RequestOperation;
import static pl.postivo.sdk.operations.Operations.AsyncRequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.Throwable;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.postivo.sdk.SDKConfiguration;
import pl.postivo.sdk.SecuritySource;
import pl.postivo.sdk.models.components.Sender;
import pl.postivo.sdk.models.components.SenderDetails;
import pl.postivo.sdk.models.errors.APIException;
import pl.postivo.sdk.models.errors.ErrorResponse;
import pl.postivo.sdk.models.operations.AddSenderResponse;
import pl.postivo.sdk.utils.AsyncRetries;
import pl.postivo.sdk.utils.BackoffStrategy;
import pl.postivo.sdk.utils.Blob;
import pl.postivo.sdk.utils.Exceptions;
import pl.postivo.sdk.utils.HTTPClient;
import pl.postivo.sdk.utils.HTTPRequest;
import pl.postivo.sdk.utils.Headers;
import pl.postivo.sdk.utils.Hook.AfterErrorContextImpl;
import pl.postivo.sdk.utils.Hook.AfterSuccessContextImpl;
import pl.postivo.sdk.utils.Hook.BeforeRequestContextImpl;
import pl.postivo.sdk.utils.NonRetryableException;
import pl.postivo.sdk.utils.Options;
import pl.postivo.sdk.utils.Retries;
import pl.postivo.sdk.utils.RetryConfig;
import pl.postivo.sdk.utils.SerializedBody;
import pl.postivo.sdk.utils.Utils.JsonShape;
import pl.postivo.sdk.utils.Utils;


public class AddSender {

    static abstract class Base {
        final SDKConfiguration sdkConfiguration;
        final String baseUrl;
        final SecuritySource securitySource;
        final List<String> retryStatusCodes;
        final RetryConfig retryConfig;
        final HTTPClient client;
        final Headers _headers;

        public Base(
                @Nonnull SDKConfiguration sdkConfiguration, @Nullable Options options,
                Headers _headers) {
            this.sdkConfiguration = sdkConfiguration;
            this._headers =_headers;
            this.baseUrl = this.sdkConfiguration.serverUrl();
            this.securitySource = this.sdkConfiguration.securitySource();
            Optional.ofNullable(options)
                    .ifPresent(o -> o.validate(List.of(Options.Option.RETRY_CONFIG)));
            this.retryStatusCodes = List.of("5XX");
            this.retryConfig = Optional.ofNullable(options)
                    .flatMap(Options::retryConfig)
                    .or(sdkConfiguration::retryConfig)
                    .orElse(RetryConfig.builder().backoff(BackoffStrategy.builder()
                                    .initialInterval(500, TimeUnit.MILLISECONDS)
                                    .maxInterval(60000, TimeUnit.MILLISECONDS)
                                    .baseFactor((double) (1.5))
                                    .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                                    .retryConnectError(true)
                                    .build())
                            .build());
            this.client = this.sdkConfiguration.client();
        }

        Optional<SecuritySource> securitySource() {
            return Optional.ofNullable(this.securitySource);
        }

        BeforeRequestContextImpl createBeforeRequestContext() {
            return new BeforeRequestContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "addSender",
                    java.util.Optional.empty(),
                    securitySource());
        }

        AfterSuccessContextImpl createAfterSuccessContext() {
            return new AfterSuccessContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "addSender",
                    java.util.Optional.empty(),
                    securitySource());
        }

        AfterErrorContextImpl createAfterErrorContext() {
            return new AfterErrorContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "addSender",
                    java.util.Optional.empty(),
                    securitySource());
        }
        <T, U>HttpRequest buildRequest(T request, TypeReference<U> typeReference) throws Exception {
            String url = Utils.generateURL(
                    this.baseUrl,
                    "/senders");
            HTTPRequest req = new HTTPRequest(url, "POST");
            Object convertedRequest = Utils.convertToShape(
                    request,
                    JsonShape.DEFAULT,
                    typeReference);
            SerializedBody serializedRequestBody = Utils.serializeRequestBody(
                    convertedRequest,
                    "request",
                    "json",
                    false);
            if (serializedRequestBody == null) {
                throw new Exception("Request body is required");
            }
            req.setBody(Optional.ofNullable(serializedRequestBody));
            req.addHeader("Accept", "application/json;q=1, application/problem+json;q=0")
                    .addHeader("user-agent", SDKConfiguration.USER_AGENT);
            _headers.forEach((k, list) -> list.forEach(v -> req.addHeader(k, v)));
            Utils.configureSecurity(req, this.sdkConfiguration.securitySource().getSecurity());

            return req.build();
        }
    }

    public static class Sync extends Base
            implements RequestOperation<Sender, AddSenderResponse> {
        public Sync(
                @Nonnull SDKConfiguration sdkConfiguration, @Nullable Options options,
                Headers _headers) {
            super(
                  sdkConfiguration, options,
                  _headers);
        }

        private HttpRequest onBuildRequest(Sender request) throws Exception {
            HttpRequest req = buildRequest(request, new TypeReference<Sender>() {});
            return sdkConfiguration.hooks().beforeRequest(createBeforeRequestContext(), req);
        }

        private HttpResponse<InputStream> onError(HttpResponse<InputStream> response, Exception error) throws Exception {
            return sdkConfiguration.hooks().afterError(
                    createAfterErrorContext(),
                    Optional.ofNullable(response),
                    Optional.ofNullable(error));
        }

        private HttpResponse<InputStream> onSuccess(HttpResponse<InputStream> response) throws Exception {
            return sdkConfiguration.hooks().afterSuccess(createAfterSuccessContext(), response);
        }

        @Override
        public HttpResponse<InputStream> doRequest(Sender request) throws Exception {
            Retries retries = Retries.builder()
                    .action(() -> {
                        HttpRequest r;
                        try {
                            r = onBuildRequest(request);
                        } catch (Exception e) {
                            throw new NonRetryableException(e);
                        }
                        try {
                            HttpResponse<InputStream> httpRes = client.send(r);
                            if (Utils.statusCodeMatches(httpRes.statusCode(), "400", "401", "403", "4XX", "5XX")) {
                                return onError(httpRes, null);
                            }
                            return httpRes;
                        } catch (Exception e) {
                            return onError(null, e);
                        }
                    })
                    .retryConfig(retryConfig)
                    .statusCodes(retryStatusCodes)
                    .build();
            return onSuccess(retries.run());
        }


        @Override
        public AddSenderResponse handleResponse(HttpResponse<InputStream> response) throws Exception {
            String contentType = response
                    .headers()
                    .firstValue("Content-Type")
                    .orElse("application/octet-stream");
            AddSenderResponse.Builder resBuilder =
                    AddSenderResponse
                            .builder()
                            .contentType(contentType)
                            .statusCode(response.statusCode())
                            .rawResponse(response);

            AddSenderResponse res = resBuilder.build();
            
            if (Utils.statusCodeMatches(response.statusCode(), "201")) {
                res.withHeaders(response.headers().map());
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    SenderDetails out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                    res.withSenderDetails(out);
                    return res;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "400", "401", "403", "4XX")) {
                if (Utils.contentTypeMatches(contentType, "application/problem+json")) {
                    ErrorResponse out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                        out.withRawResponse(response);
                    
                    throw out;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
                if (Utils.contentTypeMatches(contentType, "application/problem+json")) {
                    ErrorResponse out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                        out.withRawResponse(response);
                    
                    throw out;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "default")) {
                if (Utils.contentTypeMatches(contentType, "application/problem+json")) {
                    pl.postivo.sdk.models.components.ErrorResponse out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                    res.withErrorResponse(out);
                    return res;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            throw new APIException(
                    response,
                    response.statusCode(),
                    "Unexpected status code received: " + response.statusCode(),
                    Utils.extractByteArrayFromBody(response));
        }
    }
    public static class Async extends Base
            implements AsyncRequestOperation<Sender, pl.postivo.sdk.models.operations.async.AddSenderResponse> {
        private final ScheduledExecutorService retryScheduler;

        public Async(
                @Nonnull SDKConfiguration sdkConfiguration, @Nullable Options options,
                @Nullable ScheduledExecutorService retryScheduler, Headers _headers) {
            super(
                  sdkConfiguration, options,
                  _headers);
            this.retryScheduler = retryScheduler;
        }

        private CompletableFuture<HttpRequest> onBuildRequest(Sender request) throws Exception {
            HttpRequest req = buildRequest(request, new TypeReference<Sender>() {});
            return this.sdkConfiguration.asyncHooks().beforeRequest(createBeforeRequestContext(), req);
        }

        private CompletableFuture<HttpResponse<Blob>> onError(HttpResponse<Blob> response, Throwable error) {
            return this.sdkConfiguration.asyncHooks().afterError(createAfterErrorContext(), response, error);
        }

        private CompletableFuture<HttpResponse<Blob>> onSuccess(HttpResponse<Blob> response) {
            return this.sdkConfiguration.asyncHooks().afterSuccess(createAfterSuccessContext(), response);
        }

        @Override
        public CompletableFuture<HttpResponse<Blob>> doRequest(Sender request) {
            AsyncRetries retries = AsyncRetries.builder()
                    .retryConfig(retryConfig)
                    .statusCodes(retryStatusCodes)
                    .scheduler(retryScheduler)
                    .build();
            return retries.retry(() -> Exceptions.unchecked(() -> onBuildRequest(request)).get().thenCompose(client::sendAsync)
                            .handle((resp, err) -> {
                                if (err != null) {
                                    return onError(null, err);
                                }
                                if (Utils.statusCodeMatches(resp.statusCode(), "400", "401", "403", "4XX", "5XX")) {
                                    return onError(resp, null);
                                }
                                return CompletableFuture.completedFuture(resp);
                            })
                            .thenCompose(Function.identity()))
                    .thenCompose(this::onSuccess);
        }

        @Override
        public CompletableFuture<pl.postivo.sdk.models.operations.async.AddSenderResponse> handleResponse(
                HttpResponse<Blob> response) {
            String contentType = response
                    .headers()
                    .firstValue("Content-Type")
                    .orElse("application/octet-stream");
            pl.postivo.sdk.models.operations.async.AddSenderResponse.Builder resBuilder =
                    pl.postivo.sdk.models.operations.async.AddSenderResponse
                            .builder()
                            .contentType(contentType)
                            .statusCode(response.statusCode())
                            .rawResponse(response);

            pl.postivo.sdk.models.operations.async.AddSenderResponse res = resBuilder.build();
            
            if (Utils.statusCodeMatches(response.statusCode(), "201")) {
                res.withHeaders(response.headers().map());
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    return response.body().toByteArray().thenApply(bodyBytes -> {
                        try {
                            SenderDetails out = Utils.mapper().readValue(
                                    bodyBytes,
                                    new TypeReference<>() {
                                    });
                            res.withSenderDetails(out);
                            return res;
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                    });
                } else {
                    return Utils.createAsyncApiError(response, "Unexpected content-type received: " + contentType);
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "400", "401", "403", "4XX")) {
                if (Utils.contentTypeMatches(contentType, "application/problem+json")) {
                    return response.body().toByteArray().thenApply(bodyBytes -> {
                        pl.postivo.sdk.models.errors.async.ErrorResponse out;
                        try {
                            out = Utils.mapper().readValue(
                                    bodyBytes,
                                    new TypeReference<>() {
                                    });
                            out.withRawResponse(response);
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                        throw out;
                    });
                } else {
                    return Utils.createAsyncApiError(response, "Unexpected content-type received: " + contentType);
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
                if (Utils.contentTypeMatches(contentType, "application/problem+json")) {
                    return response.body().toByteArray().thenApply(bodyBytes -> {
                        pl.postivo.sdk.models.errors.async.ErrorResponse out;
                        try {
                            out = Utils.mapper().readValue(
                                    bodyBytes,
                                    new TypeReference<>() {
                                    });
                            out.withRawResponse(response);
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                        throw out;
                    });
                } else {
                    return Utils.createAsyncApiError(response, "Unexpected content-type received: " + contentType);
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "default")) {
                if (Utils.contentTypeMatches(contentType, "application/problem+json")) {
                    return response.body().toByteArray().thenApply(bodyBytes -> {
                        try {
                            pl.postivo.sdk.models.components.ErrorResponse out = Utils.mapper().readValue(
                                    bodyBytes,
                                    new TypeReference<>() {
                                    });
                            res.withErrorResponse(out);
                            return res;
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                    });
                } else {
                    return Utils.createAsyncApiError(response, "Unexpected content-type received: " + contentType);
                }
            }
            
            return Utils.createAsyncApiError(response, "Unexpected status code received: " + response.statusCode());
        }
    }
}
