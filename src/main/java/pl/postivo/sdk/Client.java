/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package pl.postivo.sdk;

import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;
import pl.postivo.sdk.utils.HTTPClient;
import pl.postivo.sdk.utils.Headers;
import pl.postivo.sdk.utils.RetryConfig;
import pl.postivo.sdk.utils.SpeakeasyHTTPClient;
import pl.postivo.sdk.utils.Utils;

public class Client {
    private static final Headers _headers = Headers.EMPTY;

    /**
     * AvailableServers contains identifiers for the servers available to the SDK.
     */
    public enum AvailableServers {
        /**
         * PROD
         * 
         * <p>Production system
         */
        PROD("prod"),
        /**
         * SANDBOX
         * 
         * <p>Test system (SANDBOX)
         */
        SANDBOX("sandbox");

        private final String server;

        AvailableServers(String server) {
            this.server = server;
        }

        public String server() {
           return server;
        }
    }

    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    @SuppressWarnings("serial")
    public static final Map<AvailableServers, String> SERVERS = new HashMap<>() { {
        put(AvailableServers.PROD, "https://api.postivo.pl/rest/v1");
        put(AvailableServers.SANDBOX, "https://api.postivo.pl/rest-sandbox/v1");
    }};


    private final Accounts accounts;


    private final AddressBook addressBook;


    private final Shipments shipments;


    private final Metadata metadata;

    /**
     * Common
     */
    private final Common common;


    private final Senders senders;


    public Accounts accounts() {
        return accounts;
    }


    public AddressBook addressBook() {
        return addressBook;
    }


    public Shipments shipments() {
        return shipments;
    }


    public Metadata metadata() {
        return metadata;
    }

    /**
     * Common
     */
    public Common common() {
        return common;
    }


    public Senders senders() {
        return senders;
    }
    private final AsyncClient asyncSDK;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();
        private String serverUrl;
        private String server;
        

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.setClient(client);
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param bearer The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder bearer(String bearer) {
            this.sdkConfiguration.setSecuritySource(SecuritySource.of(pl.postivo.sdk.models.components.Security.builder()
              .bearer(bearer)
              .build()));
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         *
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            Utils.checkNotNull(securitySource, "securitySource");
            this.sdkConfiguration.setSecuritySource(securitySource);
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by name.
         *
         * @param server The server to use for all requests.
         * @return The builder instance.
         */
        public Builder server(AvailableServers server) {
            this.server = server.server();
            this.serverUrl = SERVERS.get(server);
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.setRetryConfig(Optional.of(retryConfig));
            return this;
        }

        /**
         * Enables debug logging for HTTP requests and responses, including JSON body content.
         * <p>
         * Convenience method that calls {@link HTTPClient#enableDebugLogging(boolean)}.
         * {@link SpeakeasyHTTPClient} honors this setting. If you are using a custom HTTP client,
         * it is up to the custom client to honor this setting.
         * </p>
         *
         * @param enabled Whether to enable debug logging.
         * @return The builder instance.
         */
        public Builder enableHTTPDebugLogging(boolean enabled) {
            this.sdkConfiguration.client().enableDebugLogging(enabled);
            return this;
        }

        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(pl.postivo.sdk.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);  
            return this;  
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(Consumer<? super pl.postivo.sdk.utils.Hooks> consumer) {
            consumer.accept(sdkConfiguration.hooks());
            return this;    
        }

        /**
         * Builds a new instance of the SDK.
         *
         * @return The SDK instance.
         */
        public Client build() {
            if (serverUrl == null || serverUrl.isBlank()) {
                serverUrl = SERVERS.get(AvailableServers.PROD);
                server = AvailableServers.PROD.server();
            }
            sdkConfiguration.setServerUrl(serverUrl);
            if (server != null) {
                sdkConfiguration.setServer(server);
            }
            return new Client(sdkConfiguration);
        }
    }

    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     *
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    public Client(SDKConfiguration sdkConfiguration) {
        sdkConfiguration.initialize();
        this.accounts = new Accounts(sdkConfiguration);
        this.addressBook = new AddressBook(sdkConfiguration);
        this.shipments = new Shipments(sdkConfiguration);
        this.metadata = new Metadata(sdkConfiguration);
        this.common = new Common(sdkConfiguration);
        this.senders = new Senders(sdkConfiguration);
        sdkConfiguration = sdkConfiguration.hooks().sdkInit(sdkConfiguration);
        this.asyncSDK = new AsyncClient(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncClient async() {
        return asyncSDK;
    }

}
